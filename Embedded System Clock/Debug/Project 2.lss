
Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000139e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00800060  0000139e  00001432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080013a  0080013a  0000150c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fae  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000774  00000000  00000000  000025fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2b  00000000  00000000  00002d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  0000379c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ac  00000000  00000000  00003dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000446f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	90 05       	cpc	r25, r0
      56:	b6 05       	cpc	r27, r6
      58:	dc 05       	cpc	r29, r12
      5a:	02 06       	cpc	r0, r18
      5c:	07 06       	cpc	r0, r23
      5e:	2d 06       	cpc	r2, r29
      60:	53 06       	cpc	r5, r19
      62:	79 06       	cpc	r7, r25
      64:	9a 06       	cpc	r9, r26
      66:	9a 06       	cpc	r9, r26
      68:	9a 06       	cpc	r9, r26
      6a:	9a 06       	cpc	r9, r26
      6c:	a7 06       	cpc	r10, r23
      6e:	7e 06       	cpc	r7, r30
      70:	ae 06       	cpc	r10, r30

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	11 e0       	ldi	r17, 0x01	; 1
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	ee e9       	ldi	r30, 0x9E	; 158
      86:	f3 e1       	ldi	r31, 0x13	; 19
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	aa 33       	cpi	r26, 0x3A	; 58
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	21 e0       	ldi	r18, 0x01	; 1
      96:	aa e3       	ldi	r26, 0x3A	; 58
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	ac 34       	cpi	r26, 0x4C	; 76
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 6c 05 	call	0xad8	; 0xad8 <main>
      a8:	0c 94 cd 09 	jmp	0x139a	; 0x139a <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <output>:
{
  char c;
  while ((c = pgm_read_byte(s++)) != 0) {
    write(c, 1);
  }
}
      b0:	66 23       	and	r22, r22
      b2:	11 f0       	breq	.+4      	; 0xb8 <output+0x8>
      b4:	c0 9a       	sbi	0x18, 0	; 24
      b6:	01 c0       	rjmp	.+2      	; 0xba <output+0xa>
      b8:	c0 98       	cbi	0x18, 0	; 24
      ba:	c1 98       	cbi	0x18, 1	; 24
      bc:	82 bb       	out	0x12, r24	; 18
      be:	8f ef       	ldi	r24, 0xFF	; 255
      c0:	81 bb       	out	0x11, r24	; 17
      c2:	c2 9a       	sbi	0x18, 2	; 24
      c4:	00 00       	nop
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	c2 98       	cbi	0x18, 2	; 24
      cc:	08 95       	ret

000000ce <write>:
      ce:	c0 98       	cbi	0x18, 0	; 24
      d0:	c1 9a       	sbi	0x18, 1	; 24
      d2:	11 ba       	out	0x11, r1	; 17
      d4:	90 b3       	in	r25, 0x10	; 16
      d6:	c2 9a       	sbi	0x18, 2	; 24
      d8:	00 00       	nop
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	11 ba       	out	0x11, r1	; 17
      e0:	90 b3       	in	r25, 0x10	; 16
      e2:	c2 98       	cbi	0x18, 2	; 24
      e4:	99 23       	and	r25, r25
      e6:	9c f3       	brlt	.-26     	; 0xce <write>
      e8:	0e 94 58 00 	call	0xb0	; 0xb0 <output>
      ec:	08 95       	ret

000000ee <avr_wait>:
      ee:	9c 01       	movw	r18, r24
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	83 bf       	out	0x33, r24	; 51
      f4:	83 e8       	ldi	r24, 0x83	; 131
      f6:	08 c0       	rjmp	.+16     	; 0x108 <avr_wait+0x1a>
      f8:	82 bf       	out	0x32, r24	; 50
      fa:	98 b7       	in	r25, 0x38	; 56
      fc:	91 60       	ori	r25, 0x01	; 1
      fe:	98 bf       	out	0x38, r25	; 56
     100:	a8 95       	wdr
     102:	08 b6       	in	r0, 0x38	; 56
     104:	00 fe       	sbrs	r0, 0
     106:	fd cf       	rjmp	.-6      	; 0x102 <avr_wait+0x14>
     108:	21 50       	subi	r18, 0x01	; 1
     10a:	31 09       	sbc	r19, r1
     10c:	a8 f7       	brcc	.-22     	; 0xf8 <avr_wait+0xa>
     10e:	13 be       	out	0x33, r1	; 51
     110:	08 95       	ret

00000112 <lcd_init>:
     112:	b8 9a       	sbi	0x17, 0	; 23
     114:	b9 9a       	sbi	0x17, 1	; 23
     116:	ba 9a       	sbi	0x17, 2	; 23
     118:	80 e1       	ldi	r24, 0x10	; 16
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 77 00 	call	0xee	; 0xee <avr_wait>
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	80 e3       	ldi	r24, 0x30	; 48
     124:	0e 94 58 00 	call	0xb0	; 0xb0 <output>
     128:	85 e0       	ldi	r24, 0x05	; 5
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 77 00 	call	0xee	; 0xee <avr_wait>
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	80 e3       	ldi	r24, 0x30	; 48
     134:	0e 94 58 00 	call	0xb0	; 0xb0 <output>
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 77 00 	call	0xee	; 0xee <avr_wait>
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	8c e3       	ldi	r24, 0x3C	; 60
     144:	0e 94 67 00 	call	0xce	; 0xce <write>
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	8c e0       	ldi	r24, 0x0C	; 12
     14c:	0e 94 67 00 	call	0xce	; 0xce <write>
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	86 e0       	ldi	r24, 0x06	; 6
     154:	0e 94 67 00 	call	0xce	; 0xce <write>
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 67 00 	call	0xce	; 0xce <write>
     160:	08 95       	ret

00000162 <lcd_pos>:
     162:	cf 93       	push	r28
     164:	c6 2f       	mov	r28, r22
     166:	98 e2       	ldi	r25, 0x28	; 40
     168:	89 9f       	mul	r24, r25
     16a:	c0 0d       	add	r28, r0
     16c:	11 24       	eor	r1, r1
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	0e 94 67 00 	call	0xce	; 0xce <write>
     176:	cc 23       	and	r28, r28
     178:	31 f0       	breq	.+12     	; 0x186 <lcd_pos+0x24>
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	84 e1       	ldi	r24, 0x14	; 20
     17e:	0e 94 67 00 	call	0xce	; 0xce <write>
     182:	c1 50       	subi	r28, 0x01	; 1
     184:	d1 f7       	brne	.-12     	; 0x17a <lcd_pos+0x18>
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <lcd_puts2>:

void
lcd_puts2(const char *s)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
  char c;
  while ((c = *(s++)) != 0) {
     18e:	ec 01       	movw	r28, r24
     190:	21 96       	adiw	r28, 0x01	; 1
     192:	fc 01       	movw	r30, r24
     194:	80 81       	ld	r24, Z
     196:	88 23       	and	r24, r24
     198:	31 f0       	breq	.+12     	; 0x1a6 <lcd_puts2+0x1c>
    write(c, 1);
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	0e 94 67 00 	call	0xce	; 0xce <write>

void
lcd_puts2(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
     1a0:	89 91       	ld	r24, Y+
     1a2:	81 11       	cpse	r24, r1
     1a4:	fa cf       	rjmp	.-12     	; 0x19a <lcd_puts2+0x10>
    write(c, 1);
  }
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <is_pressed>:
	}
	return 0;
}

int is_pressed(int r, int c)
{
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
	DDRC = 0;
     1b0:	14 ba       	out	0x14, r1	; 20
	PORTC = 0;
     1b2:	15 ba       	out	0x15, r1	; 21

	SET_BIT(DDRC, r);
     1b4:	44 b3       	in	r20, 0x14	; 20
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	f9 01       	movw	r30, r18
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <is_pressed+0x16>
     1be:	ee 0f       	add	r30, r30
     1c0:	ff 1f       	adc	r31, r31
     1c2:	8a 95       	dec	r24
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <is_pressed+0x12>
     1c6:	cf 01       	movw	r24, r30
     1c8:	4e 2b       	or	r20, r30
     1ca:	44 bb       	out	0x14, r20	; 20
	CLR_BIT(PORTC, r);
     1cc:	95 b3       	in	r25, 0x15	; 21
     1ce:	80 95       	com	r24
     1d0:	89 23       	and	r24, r25
     1d2:	85 bb       	out	0x15, r24	; 21
	
	CLR_BIT(DDRC, c+4);
     1d4:	84 b3       	in	r24, 0x14	; 20
     1d6:	eb 01       	movw	r28, r22
     1d8:	24 96       	adiw	r28, 0x04	; 4
     1da:	0c 2e       	mov	r0, r28
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <is_pressed+0x36>
     1de:	22 0f       	add	r18, r18
     1e0:	33 1f       	adc	r19, r19
     1e2:	0a 94       	dec	r0
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <is_pressed+0x32>
     1e6:	92 2f       	mov	r25, r18
     1e8:	90 95       	com	r25
     1ea:	89 23       	and	r24, r25
     1ec:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC, c+4);
     1ee:	85 b3       	in	r24, 0x15	; 21
     1f0:	28 2b       	or	r18, r24
     1f2:	25 bb       	out	0x15, r18	; 21
	
	avr_wait(1);
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 77 00 	call	0xee	; 0xee <avr_wait>
	
	if(GET_BIT(PINC, c+4))
     1fc:	23 b3       	in	r18, 0x13	; 19
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	02 c0       	rjmp	.+4      	; 0x206 <is_pressed+0x5a>
     202:	35 95       	asr	r19
     204:	27 95       	ror	r18
     206:	ca 95       	dec	r28
     208:	e2 f7       	brpl	.-8      	; 0x202 <is_pressed+0x56>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	20 ff       	sbrs	r18, 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <is_pressed+0x6a>
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
	{
		return 0;
	}
	
	return 1;
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <get_key>:
int blinkminutes = 0;
int blinkseconds = 0;


int get_key()
{
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
	int r, c;
	for (r = 0; r < 4; ++r)
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	10 e0       	ldi	r17, 0x00	; 0
     228:	18 c0       	rjmp	.+48     	; 0x25a <get_key+0x3e>
		for (c = 0; c <4; ++c)
		{
		if(is_pressed(r,c))
     22a:	be 01       	movw	r22, r28
     22c:	c8 01       	movw	r24, r16
     22e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <is_pressed>
     232:	00 97       	sbiw	r24, 0x00	; 0
     234:	49 f0       	breq	.+18     	; 0x248 <get_key+0x2c>
			return (r*4+c) +1;
     236:	00 0f       	add	r16, r16
     238:	11 1f       	adc	r17, r17
     23a:	00 0f       	add	r16, r16
     23c:	11 1f       	adc	r17, r17
     23e:	c0 0f       	add	r28, r16
     240:	d1 1f       	adc	r29, r17
     242:	ce 01       	movw	r24, r28
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	0c c0       	rjmp	.+24     	; 0x260 <get_key+0x44>

int get_key()
{
	int r, c;
	for (r = 0; r < 4; ++r)
		for (c = 0; c <4; ++c)
     248:	21 96       	adiw	r28, 0x01	; 1
     24a:	c4 30       	cpi	r28, 0x04	; 4
     24c:	d1 05       	cpc	r29, r1
     24e:	69 f7       	brne	.-38     	; 0x22a <get_key+0xe>


int get_key()
{
	int r, c;
	for (r = 0; r < 4; ++r)
     250:	0f 5f       	subi	r16, 0xFF	; 255
     252:	1f 4f       	sbci	r17, 0xFF	; 255
     254:	04 30       	cpi	r16, 0x04	; 4
     256:	11 05       	cpc	r17, r1
     258:	19 f0       	breq	.+6      	; 0x260 <get_key+0x44>
int blinkminutes = 0;
int blinkseconds = 0;


int get_key()
{
     25a:	c0 e0       	ldi	r28, 0x00	; 0
     25c:	d0 e0       	ldi	r29, 0x00	; 0
     25e:	e5 cf       	rjmp	.-54     	; 0x22a <get_key+0xe>
		{
		if(is_pressed(r,c))
			return (r*4+c) +1;
	}
	return 0;
}
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	08 95       	ret

0000026a <isLeap>:
	}
}

int isLeap()
{
	return (years % 4 == 0) && (years % 100 != 0 || years % 400 == 0);
     26a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <years>
     26e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <years+0x1>
     272:	c9 01       	movw	r24, r18
     274:	83 70       	andi	r24, 0x03	; 3
     276:	99 27       	eor	r25, r25
     278:	89 2b       	or	r24, r25
     27a:	a1 f4       	brne	.+40     	; 0x2a4 <isLeap+0x3a>
     27c:	c9 01       	movw	r24, r18
     27e:	64 e6       	ldi	r22, 0x64	; 100
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__divmodhi4>
     286:	89 2b       	or	r24, r25
     288:	81 f4       	brne	.+32     	; 0x2aa <isLeap+0x40>
     28a:	c9 01       	movw	r24, r18
     28c:	60 e9       	ldi	r22, 0x90	; 144
     28e:	71 e0       	ldi	r23, 0x01	; 1
     290:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__divmodhi4>
     294:	21 e0       	ldi	r18, 0x01	; 1
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	89 2b       	or	r24, r25
     29a:	09 f0       	breq	.+2      	; 0x29e <isLeap+0x34>
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	82 2f       	mov	r24, r18
     2a0:	93 2f       	mov	r25, r19
     2a2:	08 95       	ret
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	08 95       	ret
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <incrementTime>:
	}
	
	return 1;
}

void incrementTime(){
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
	if(seconds < 60)
     2b8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <seconds>
     2bc:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <seconds+0x1>
     2c0:	8c 33       	cpi	r24, 0x3C	; 60
     2c2:	91 05       	cpc	r25, r1
     2c4:	b4 f4       	brge	.+44     	; 0x2f2 <incrementTime+0x42>
	{
		seconds++;
     2c6:	01 96       	adiw	r24, 0x01	; 1
		if(seconds >= 60)
     2c8:	8c 33       	cpi	r24, 0x3C	; 60
     2ca:	91 05       	cpc	r25, r1
     2cc:	2c f4       	brge	.+10     	; 0x2d8 <incrementTime+0x28>
}

void incrementTime(){
	if(seconds < 60)
	{
		seconds++;
     2ce:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <seconds+0x1>
     2d2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <seconds>
     2d6:	0d c0       	rjmp	.+26     	; 0x2f2 <incrementTime+0x42>
		if(seconds >= 60)
		{
			seconds = 0;
     2d8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <seconds+0x1>
     2dc:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <seconds>
			minutes++;
     2e0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
     2e4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <minutes+0x1>
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <minutes+0x1>
     2ee:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <minutes>
		}
	}

	if(minutes >= 60)
     2f2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
     2f6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <minutes+0x1>
     2fa:	cc 97       	sbiw	r24, 0x3c	; 60
     2fc:	6c f0       	brlt	.+26     	; 0x318 <incrementTime+0x68>
	{
		minutes = 0;
     2fe:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <minutes+0x1>
     302:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <minutes>
		hours++;
     306:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <hours>
     30a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <hours+0x1>
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <hours+0x1>
     314:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <hours>
	}

	if(hours >= 24)
     318:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <hours>
     31c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <hours+0x1>
     320:	48 97       	sbiw	r24, 0x18	; 24
     322:	0c f4       	brge	.+2      	; 0x326 <incrementTime+0x76>
     324:	64 c0       	rjmp	.+200    	; 0x3ee <incrementTime+0x13e>
	{
		hours = 0;
     326:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <hours+0x1>
     32a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <hours>
		days++;
     32e:	c0 91 66 00 	lds	r28, 0x0066	; 0x800066 <days>
     332:	d0 91 67 00 	lds	r29, 0x0067	; 0x800067 <days+0x1>
     336:	21 96       	adiw	r28, 0x01	; 1
     338:	d0 93 67 00 	sts	0x0067, r29	; 0x800067 <days+0x1>
     33c:	c0 93 66 00 	sts	0x0066, r28	; 0x800066 <days>
	}

	if(days > 28)
     340:	cd 31       	cpi	r28, 0x1D	; 29
     342:	d1 05       	cpc	r29, r1
     344:	f4 f1       	brlt	.+124    	; 0x3c2 <incrementTime+0x112>
	{
		if(days > 28 && months == 2 && !(isLeap()))
     346:	00 91 64 00 	lds	r16, 0x0064	; 0x800064 <months>
     34a:	10 91 65 00 	lds	r17, 0x0065	; 0x800065 <months+0x1>
     34e:	02 30       	cpi	r16, 0x02	; 2
     350:	11 05       	cpc	r17, r1
     352:	91 f4       	brne	.+36     	; 0x378 <incrementTime+0xc8>
     354:	0e 94 35 01 	call	0x26a	; 0x26a <isLeap>
     358:	89 2b       	or	r24, r25
     35a:	09 f0       	breq	.+2      	; 0x35e <incrementTime+0xae>
     35c:	5e c0       	rjmp	.+188    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			days = 1;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <days+0x1>
     366:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <days>
			months++;
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <months+0x1>
     372:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <months>
     376:	5c c0       	rjmp	.+184    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		else if(days > 29 && months == 2 && isLeap())
		{
			days = 1;
			months++;
		}
		else if(days > 30 && (months == 4 || months == 6 || months == 9 || months == 11))
     378:	cf 31       	cpi	r28, 0x1F	; 31
     37a:	d1 05       	cpc	r29, r1
     37c:	a4 f0       	brlt	.+40     	; 0x3a6 <incrementTime+0xf6>
     37e:	c8 01       	movw	r24, r16
     380:	8d 7f       	andi	r24, 0xFD	; 253
     382:	84 30       	cpi	r24, 0x04	; 4
     384:	91 05       	cpc	r25, r1
     386:	11 f0       	breq	.+4      	; 0x38c <incrementTime+0xdc>
     388:	09 97       	sbiw	r24, 0x09	; 9
     38a:	69 f4       	brne	.+26     	; 0x3a6 <incrementTime+0xf6>
		{
			days = 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <days+0x1>
     394:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <days>
			months++;
     398:	0f 5f       	subi	r16, 0xFF	; 255
     39a:	1f 4f       	sbci	r17, 0xFF	; 255
     39c:	10 93 65 00 	sts	0x0065, r17	; 0x800065 <months+0x1>
     3a0:	00 93 64 00 	sts	0x0064, r16	; 0x800064 <months>
     3a4:	0e c0       	rjmp	.+28     	; 0x3c2 <incrementTime+0x112>
		}
		else if(days > 31)
     3a6:	a0 97       	sbiw	r28, 0x20	; 32
     3a8:	64 f0       	brlt	.+24     	; 0x3c2 <incrementTime+0x112>
		{
			days = 1;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <days+0x1>
     3b2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <days>
			months++;
     3b6:	0f 5f       	subi	r16, 0xFF	; 255
     3b8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ba:	10 93 65 00 	sts	0x0065, r17	; 0x800065 <months+0x1>
     3be:	00 93 64 00 	sts	0x0064, r16	; 0x800064 <months>
		}
	}

	if(months > 12)
     3c2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <months>
     3c6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <months+0x1>
     3ca:	0d 97       	sbiw	r24, 0x0d	; 13
     3cc:	8c f1       	brlt	.+98     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		months = 1;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <months+0x1>
     3d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <months>
		years++;
     3da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <years>
     3de:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <years+0x1>
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <years+0x1>
     3e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <years>
	}
}
     3ec:	21 c0       	rjmp	.+66     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		hours = 0;
		days++;
	}

	if(days > 28)
     3ee:	c0 91 66 00 	lds	r28, 0x0066	; 0x800066 <days>
     3f2:	d0 91 67 00 	lds	r29, 0x0067	; 0x800067 <days+0x1>
     3f6:	cd 31       	cpi	r28, 0x1D	; 29
     3f8:	d1 05       	cpc	r29, r1
     3fa:	0c f0       	brlt	.+2      	; 0x3fe <incrementTime+0x14e>
     3fc:	a4 cf       	rjmp	.-184    	; 0x346 <incrementTime+0x96>
     3fe:	e1 cf       	rjmp	.-62     	; 0x3c2 <incrementTime+0x112>
			days = 1;
			months++;
		}
		else if(days > 29 && months == 2 && isLeap())
		{
			days = 1;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <days+0x1>
     408:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <days>
			months++;
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <months+0x1>
     414:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <months>
     418:	0b c0       	rjmp	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		if(days > 28 && months == 2 && !(isLeap()))
		{
			days = 1;
			months++;
		}
		else if(days > 29 && months == 2 && isLeap())
     41a:	ce 31       	cpi	r28, 0x1E	; 30
     41c:	d1 05       	cpc	r29, r1
     41e:	84 f7       	brge	.-32     	; 0x400 <__LOCK_REGION_LENGTH__>
     420:	03 c0       	rjmp	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		{
			days = 1;
			months++;
		}
		else if(days > 30 && (months == 4 || months == 6 || months == 9 || months == 11))
     422:	c8 01       	movw	r24, r16
     424:	8d 7f       	andi	r24, 0xFD	; 253
     426:	b0 cf       	rjmp	.-160    	; 0x388 <incrementTime+0xd8>
     428:	cf 31       	cpi	r28, 0x1F	; 31
     42a:	d1 05       	cpc	r29, r1
     42c:	d4 f7       	brge	.-12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     42e:	bb cf       	rjmp	.-138    	; 0x3a6 <incrementTime+0xf6>
	if(months > 12)
	{
		months = 1;
		years++;
	}
}
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <outputLCD>:
{
	return (years % 4 == 0) && (years % 100 != 0 || years % 400 == 0);
}

void outputLCD()
{
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	67 97       	sbiw	r28, 0x17	; 23
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
	blinkdays = 0;
     452:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <blinkdays+0x1>
     456:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <blinkdays>
	blinkmonths = 0;
     45a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <blinkmonths+0x1>
     45e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <blinkmonths>
	blinkyears = 0;
     462:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <blinkyears+0x1>
     466:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <blinkyears>
	blinkhours = 0;
     46a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <blinkhours+0x1>
     46e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <blinkhours>
	blinkminutes = 0;
     472:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <blinkminutes+0x1>
     476:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <blinkminutes>
	blinkseconds = 0;
     47a:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <__data_end+0x1>
     47e:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
	char date[11];
	char time[12];
	
	sprintf(date, "%02d/%02d/%02d", days, months, years);
     482:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <years+0x1>
     486:	8f 93       	push	r24
     488:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <years>
     48c:	8f 93       	push	r24
     48e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <months+0x1>
     492:	8f 93       	push	r24
     494:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <months>
     498:	8f 93       	push	r24
     49a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <days+0x1>
     49e:	8f 93       	push	r24
     4a0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <days>
     4a4:	8f 93       	push	r24
     4a6:	8e e6       	ldi	r24, 0x6E	; 110
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	9f 93       	push	r25
     4ac:	8f 93       	push	r24
     4ae:	8e 01       	movw	r16, r28
     4b0:	0f 5f       	subi	r16, 0xFF	; 255
     4b2:	1f 4f       	sbci	r17, 0xFF	; 255
     4b4:	1f 93       	push	r17
     4b6:	0f 93       	push	r16
     4b8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
	lcd_pos(0, 0);
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_pos>
	lcd_puts2(date);
     4c4:	c8 01       	movw	r24, r16
     4c6:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_puts2>
	
	if(militaryON)
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     4d8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     4dc:	89 2b       	or	r24, r25
     4de:	11 f1       	breq	.+68     	; 0x524 <outputLCD+0xea>
	{	
		sprintf(time, "%02d:%02d:%02d", hours, minutes, seconds);
     4e0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <seconds+0x1>
     4e4:	8f 93       	push	r24
     4e6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <seconds>
     4ea:	8f 93       	push	r24
     4ec:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <minutes+0x1>
     4f0:	8f 93       	push	r24
     4f2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
     4f6:	8f 93       	push	r24
     4f8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <hours+0x1>
     4fc:	8f 93       	push	r24
     4fe:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <hours>
     502:	8f 93       	push	r24
     504:	8d e7       	ldi	r24, 0x7D	; 125
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	ce 01       	movw	r24, r28
     50e:	0c 96       	adiw	r24, 0x0c	; 12
     510:	9f 93       	push	r25
     512:	8f 93       	push	r24
     514:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	32 c0       	rjmp	.+100    	; 0x588 <outputLCD+0x14e>
	}
	else
	{
		char * ampm;
		int regularhours;
		if(hours < 12) {
     524:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <hours>
     528:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <hours+0x1>
     52c:	8c 30       	cpi	r24, 0x0C	; 12
     52e:	91 05       	cpc	r25, r1
     530:	3c f0       	brlt	.+14     	; 0x540 <outputLCD+0x106>
			regularhours = hours;
		}
		else
		{
			ampm = "PM";
			if(hours == 12)
     532:	8c 30       	cpi	r24, 0x0C	; 12
     534:	91 05       	cpc	r25, r1
     536:	39 f0       	breq	.+14     	; 0x546 <outputLCD+0x10c>
				regularhours = 12;
			else
				regularhours = hours - 12;
     538:	0c 97       	sbiw	r24, 0x0c	; 12
			ampm = "AM";
			regularhours = hours;
		}
		else
		{
			ampm = "PM";
     53a:	2b e6       	ldi	r18, 0x6B	; 107
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	05 c0       	rjmp	.+10     	; 0x54a <outputLCD+0x110>
	else
	{
		char * ampm;
		int regularhours;
		if(hours < 12) {
			ampm = "AM";
     540:	28 e6       	ldi	r18, 0x68	; 104
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	02 c0       	rjmp	.+4      	; 0x54a <outputLCD+0x110>
			regularhours = hours;
		}
		else
		{
			ampm = "PM";
     546:	2b e6       	ldi	r18, 0x6B	; 107
     548:	30 e0       	ldi	r19, 0x00	; 0
			if(hours == 12)
				regularhours = 12;
			else
				regularhours = hours - 12;
		}
		sprintf(time, "%02d:%02d:%02d %s", regularhours, minutes, seconds, ampm);	
     54a:	3f 93       	push	r19
     54c:	2f 93       	push	r18
     54e:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <seconds+0x1>
     552:	2f 93       	push	r18
     554:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <seconds>
     558:	2f 93       	push	r18
     55a:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <minutes+0x1>
     55e:	2f 93       	push	r18
     560:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <minutes>
     564:	2f 93       	push	r18
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	8c e8       	ldi	r24, 0x8C	; 140
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	ce 01       	movw	r24, r28
     574:	0c 96       	adiw	r24, 0x0c	; 12
     576:	9f 93       	push	r25
     578:	8f 93       	push	r24
     57a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	f8 94       	cli
     582:	de bf       	out	0x3e, r29	; 62
     584:	0f be       	out	0x3f, r0	; 63
     586:	cd bf       	out	0x3d, r28	; 61
	}
	
	lcd_pos(1, 0);
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_pos>
	lcd_puts2(time);
     590:	ce 01       	movw	r24, r28
     592:	0c 96       	adiw	r24, 0x0c	; 12
     594:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_puts2>
}
     598:	67 96       	adiw	r28, 0x17	; 23
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <outputLCD2>:

void outputLCD2()
{
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
     5c2:	67 97       	sbiw	r28, 0x17	; 23
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
	char date[11];
	char time[12];
	
	sprintf(date, "%02d/%02d/%02d", days, months, years);
     5ce:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <years+0x1>
     5d2:	8f 93       	push	r24
     5d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <years>
     5d8:	8f 93       	push	r24
     5da:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <months+0x1>
     5de:	8f 93       	push	r24
     5e0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <months>
     5e4:	8f 93       	push	r24
     5e6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <days+0x1>
     5ea:	8f 93       	push	r24
     5ec:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <days>
     5f0:	8f 93       	push	r24
     5f2:	8e e6       	ldi	r24, 0x6E	; 110
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9f 93       	push	r25
     5f8:	8f 93       	push	r24
     5fa:	8e 01       	movw	r16, r28
     5fc:	0f 5f       	subi	r16, 0xFF	; 255
     5fe:	1f 4f       	sbci	r17, 0xFF	; 255
     600:	1f 93       	push	r17
     602:	0f 93       	push	r16
     604:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
	lcd_pos(0, 0);
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_pos>
	lcd_puts2(date);
     610:	c8 01       	movw	r24, r16
     612:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_puts2>
	avr_wait(250);
     616:	8a ef       	ldi	r24, 0xFA	; 250
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 77 00 	call	0xee	; 0xee <avr_wait>
	if(blinkdays)
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
     628:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <blinkdays>
     62c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <blinkdays+0x1>
     630:	89 2b       	or	r24, r25
     632:	c9 f0       	breq	.+50     	; 0x666 <outputLCD2+0xb8>
		sprintf(date, "  /%02d/%02d", months, years);
     634:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <years+0x1>
     638:	8f 93       	push	r24
     63a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <years>
     63e:	8f 93       	push	r24
     640:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <months+0x1>
     644:	8f 93       	push	r24
     646:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <months>
     64a:	8f 93       	push	r24
     64c:	8e e9       	ldi	r24, 0x9E	; 158
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	9f 93       	push	r25
     652:	8f 93       	push	r24
     654:	1f 93       	push	r17
     656:	0f 93       	push	r16
     658:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
	if(blinkmonths)
     666:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <blinkmonths>
     66a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <blinkmonths+0x1>
     66e:	89 2b       	or	r24, r25
     670:	d9 f0       	breq	.+54     	; 0x6a8 <outputLCD2+0xfa>
		sprintf(date, "%02d/  /%02d", days, years);
     672:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <years+0x1>
     676:	8f 93       	push	r24
     678:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <years>
     67c:	8f 93       	push	r24
     67e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <days+0x1>
     682:	8f 93       	push	r24
     684:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <days>
     688:	8f 93       	push	r24
     68a:	8b ea       	ldi	r24, 0xAB	; 171
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	9f 93       	push	r25
     690:	8f 93       	push	r24
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
	if(blinkyears)
     6a8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <blinkyears>
     6ac:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <blinkyears+0x1>
     6b0:	89 2b       	or	r24, r25
     6b2:	d9 f0       	breq	.+54     	; 0x6ea <outputLCD2+0x13c>
		sprintf(date, "%02d/%02d/    ", days, months);
     6b4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <months+0x1>
     6b8:	8f 93       	push	r24
     6ba:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <months>
     6be:	8f 93       	push	r24
     6c0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <days+0x1>
     6c4:	8f 93       	push	r24
     6c6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <days>
     6ca:	8f 93       	push	r24
     6cc:	88 eb       	ldi	r24, 0xB8	; 184
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	9f 93       	push	r25
     6d2:	8f 93       	push	r24
     6d4:	ce 01       	movw	r24, r28
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
	lcd_pos(0, 0);
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_pos>
	lcd_puts2(date);
     6f2:	ce 01       	movw	r24, r28
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_puts2>
	avr_wait(250);
     6fa:	8a ef       	ldi	r24, 0xFA	; 250
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 77 00 	call	0xee	; 0xee <avr_wait>
	
	
	if(militaryON)
     702:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     706:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     70a:	89 2b       	or	r24, r25
     70c:	09 f4       	brne	.+2      	; 0x710 <outputLCD2+0x162>
     70e:	91 c0       	rjmp	.+290    	; 0x832 <outputLCD2+0x284>
	{
		sprintf(time, "%02d:%02d:%02d   ", hours, minutes, seconds);
     710:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <seconds+0x1>
     714:	8f 93       	push	r24
     716:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <seconds>
     71a:	8f 93       	push	r24
     71c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <minutes+0x1>
     720:	8f 93       	push	r24
     722:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
     726:	8f 93       	push	r24
     728:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <hours+0x1>
     72c:	8f 93       	push	r24
     72e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <hours>
     732:	8f 93       	push	r24
     734:	87 ec       	ldi	r24, 0xC7	; 199
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	8e 01       	movw	r16, r28
     73e:	04 5f       	subi	r16, 0xF4	; 244
     740:	1f 4f       	sbci	r17, 0xFF	; 255
     742:	1f 93       	push	r17
     744:	0f 93       	push	r16
     746:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
		lcd_pos(1, 0);
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_pos>
		lcd_puts2(time);
     752:	c8 01       	movw	r24, r16
     754:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_puts2>
		avr_wait(250);
     758:	8a ef       	ldi	r24, 0xFA	; 250
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 77 00 	call	0xee	; 0xee <avr_wait>
		if(blinkhours)
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <blinkhours>
     76e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <blinkhours+0x1>
     772:	89 2b       	or	r24, r25
     774:	d1 f0       	breq	.+52     	; 0x7aa <outputLCD2+0x1fc>
			sprintf(time, "  :%02d:%02d   ", minutes, seconds);
     776:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <seconds+0x1>
     77a:	8f 93       	push	r24
     77c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <seconds>
     780:	8f 93       	push	r24
     782:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <minutes+0x1>
     786:	8f 93       	push	r24
     788:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
     78c:	8f 93       	push	r24
     78e:	89 ed       	ldi	r24, 0xD9	; 217
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	9f 93       	push	r25
     794:	8f 93       	push	r24
     796:	c8 01       	movw	r24, r16
     798:	9f 93       	push	r25
     79a:	0f 93       	push	r16
     79c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
		if(blinkminutes)
     7aa:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <blinkminutes>
     7ae:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <blinkminutes+0x1>
     7b2:	89 2b       	or	r24, r25
     7b4:	d9 f0       	breq	.+54     	; 0x7ec <outputLCD2+0x23e>
			sprintf(time, "%02d:  :%02d   ", hours, seconds);
     7b6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <seconds+0x1>
     7ba:	8f 93       	push	r24
     7bc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <seconds>
     7c0:	8f 93       	push	r24
     7c2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <hours+0x1>
     7c6:	8f 93       	push	r24
     7c8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <hours>
     7cc:	8f 93       	push	r24
     7ce:	89 ee       	ldi	r24, 0xE9	; 233
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	ce 01       	movw	r24, r28
     7d8:	0c 96       	adiw	r24, 0x0c	; 12
     7da:	9f 93       	push	r25
     7dc:	8f 93       	push	r24
     7de:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
		if(blinkseconds)
     7ec:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     7f0:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
     7f4:	89 2b       	or	r24, r25
     7f6:	09 f4       	brne	.+2      	; 0x7fa <outputLCD2+0x24c>
     7f8:	c8 c0       	rjmp	.+400    	; 0x98a <__stack+0x12b>
			sprintf(time, "%02d:%02d:     ", hours, minutes);
     7fa:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <minutes+0x1>
     7fe:	8f 93       	push	r24
     800:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
     804:	8f 93       	push	r24
     806:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <hours+0x1>
     80a:	8f 93       	push	r24
     80c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <hours>
     810:	8f 93       	push	r24
     812:	89 ef       	ldi	r24, 0xF9	; 249
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	ce 01       	movw	r24, r28
     81c:	0c 96       	adiw	r24, 0x0c	; 12
     81e:	9f 93       	push	r25
     820:	8f 93       	push	r24
     822:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	ac c0       	rjmp	.+344    	; 0x98a <__stack+0x12b>
	}
	else
	{
		char * ampm;
		int regularhours;
		if(hours < 12) {
     832:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <hours>
     836:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <hours+0x1>
     83a:	0c 30       	cpi	r16, 0x0C	; 12
     83c:	11 05       	cpc	r17, r1
     83e:	64 f0       	brlt	.+24     	; 0x858 <outputLCD2+0x2aa>
			regularhours = hours;
		}
		else
		{
			ampm = "PM";
			if(hours == 12)
     840:	0c 30       	cpi	r16, 0x0C	; 12
     842:	11 05       	cpc	r17, r1
     844:	81 f0       	breq	.+32     	; 0x866 <__stack+0x7>
			regularhours = 12;
			else
			regularhours = hours - 12;
     846:	0c 50       	subi	r16, 0x0C	; 12
     848:	11 09       	sbc	r17, r1
			ampm = "AM";
			regularhours = hours;
		}
		else
		{
			ampm = "PM";
     84a:	0f 2e       	mov	r0, r31
     84c:	fb e6       	ldi	r31, 0x6B	; 107
     84e:	ef 2e       	mov	r14, r31
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	ff 2e       	mov	r15, r31
     854:	f0 2d       	mov	r31, r0
     856:	0d c0       	rjmp	.+26     	; 0x872 <__stack+0x13>
	else
	{
		char * ampm;
		int regularhours;
		if(hours < 12) {
			ampm = "AM";
     858:	0f 2e       	mov	r0, r31
     85a:	f8 e6       	ldi	r31, 0x68	; 104
     85c:	ef 2e       	mov	r14, r31
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	ff 2e       	mov	r15, r31
     862:	f0 2d       	mov	r31, r0
     864:	06 c0       	rjmp	.+12     	; 0x872 <__stack+0x13>
			regularhours = hours;
		}
		else
		{
			ampm = "PM";
     866:	0f 2e       	mov	r0, r31
     868:	fb e6       	ldi	r31, 0x6B	; 107
     86a:	ef 2e       	mov	r14, r31
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	ff 2e       	mov	r15, r31
     870:	f0 2d       	mov	r31, r0
			if(hours == 12)
			regularhours = 12;
			else
			regularhours = hours - 12;
		}
		sprintf(time, "%02d:%02d:%02d %s", regularhours, minutes, seconds, ampm);
     872:	ff 92       	push	r15
     874:	ef 92       	push	r14
     876:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <seconds+0x1>
     87a:	8f 93       	push	r24
     87c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <seconds>
     880:	8f 93       	push	r24
     882:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <minutes+0x1>
     886:	8f 93       	push	r24
     888:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
     88c:	8f 93       	push	r24
     88e:	1f 93       	push	r17
     890:	0f 93       	push	r16
     892:	8c e8       	ldi	r24, 0x8C	; 140
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	9f 93       	push	r25
     898:	8f 93       	push	r24
     89a:	6e 01       	movw	r12, r28
     89c:	9c e0       	ldi	r25, 0x0C	; 12
     89e:	c9 0e       	add	r12, r25
     8a0:	d1 1c       	adc	r13, r1
     8a2:	df 92       	push	r13
     8a4:	cf 92       	push	r12
     8a6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
		lcd_pos(1, 0);
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_pos>
		lcd_puts2(time);
     8b2:	c6 01       	movw	r24, r12
     8b4:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_puts2>
		avr_wait(250);
     8b8:	8a ef       	ldi	r24, 0xFA	; 250
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 77 00 	call	0xee	; 0xee <avr_wait>
		if(blinkhours)
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <blinkhours>
     8ce:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <blinkhours+0x1>
     8d2:	89 2b       	or	r24, r25
     8d4:	e1 f0       	breq	.+56     	; 0x90e <__stack+0xaf>
			sprintf(time, "  :%02d:%02d %s", minutes, seconds, ampm);
     8d6:	ff 92       	push	r15
     8d8:	ef 92       	push	r14
     8da:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <seconds+0x1>
     8de:	8f 93       	push	r24
     8e0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <seconds>
     8e4:	8f 93       	push	r24
     8e6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <minutes+0x1>
     8ea:	8f 93       	push	r24
     8ec:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
     8f0:	8f 93       	push	r24
     8f2:	89 e0       	ldi	r24, 0x09	; 9
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	9f 93       	push	r25
     8f8:	8f 93       	push	r24
     8fa:	c6 01       	movw	r24, r12
     8fc:	9f 93       	push	r25
     8fe:	cf 92       	push	r12
     900:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
		if(blinkminutes)
     90e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <blinkminutes>
     912:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <blinkminutes+0x1>
     916:	89 2b       	or	r24, r25
     918:	c9 f0       	breq	.+50     	; 0x94c <__stack+0xed>
			sprintf(time, "%02d:  :%02d %s", regularhours, seconds, ampm);
     91a:	ff 92       	push	r15
     91c:	ef 92       	push	r14
     91e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <seconds+0x1>
     922:	8f 93       	push	r24
     924:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <seconds>
     928:	8f 93       	push	r24
     92a:	1f 93       	push	r17
     92c:	0f 93       	push	r16
     92e:	89 e1       	ldi	r24, 0x19	; 25
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	9f 93       	push	r25
     934:	8f 93       	push	r24
     936:	ce 01       	movw	r24, r28
     938:	0c 96       	adiw	r24, 0x0c	; 12
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
		if(blinkseconds)
     94c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     950:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
     954:	89 2b       	or	r24, r25
     956:	c9 f0       	breq	.+50     	; 0x98a <__stack+0x12b>
			sprintf(time, "%02d:%02d:   %s", regularhours, minutes, ampm);
     958:	ff 92       	push	r15
     95a:	ef 92       	push	r14
     95c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <minutes+0x1>
     960:	8f 93       	push	r24
     962:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
     966:	8f 93       	push	r24
     968:	1f 93       	push	r17
     96a:	0f 93       	push	r16
     96c:	89 e2       	ldi	r24, 0x29	; 41
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	ce 01       	movw	r24, r28
     976:	0c 96       	adiw	r24, 0x0c	; 12
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <sprintf>
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
	}
	lcd_pos(1, 0);
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_pos>
	lcd_puts2(time);
     992:	ce 01       	movw	r24, r28
     994:	0c 96       	adiw	r24, 0x0c	; 12
     996:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_puts2>
	avr_wait(250);
     99a:	8a ef       	ldi	r24, 0xFA	; 250
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 77 00 	call	0xee	; 0xee <avr_wait>
	
}
     9a2:	67 96       	adiw	r28, 0x17	; 23
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	08 95       	ret

000009c0 <fixTime>:

void fixTime(){
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
	if(years < 0){
     9c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <years>
     9cc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <years+0x1>
     9d0:	99 23       	and	r25, r25
     9d2:	34 f4       	brge	.+12     	; 0x9e0 <fixTime+0x20>
		years = 2010;
     9d4:	8a ed       	ldi	r24, 0xDA	; 218
     9d6:	97 e0       	ldi	r25, 0x07	; 7
     9d8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <years+0x1>
     9dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <years>
	}

	if(months > 12){
     9e0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <months>
     9e4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <months+0x1>
     9e8:	0d 97       	sbiw	r24, 0x0d	; 13
     9ea:	34 f0       	brlt	.+12     	; 0x9f8 <fixTime+0x38>
		months = 1;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <months+0x1>
     9f4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <months>
	}

	if(hours > 23){
     9f8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <hours>
     9fc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <hours+0x1>
     a00:	48 97       	sbiw	r24, 0x18	; 24
     a02:	24 f0       	brlt	.+8      	; 0xa0c <fixTime+0x4c>
		hours = 0;
     a04:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <hours+0x1>
     a08:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <hours>
	}

	if(minutes > 59){
     a0c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
     a10:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <minutes+0x1>
     a14:	cc 97       	sbiw	r24, 0x3c	; 60
     a16:	24 f0       	brlt	.+8      	; 0xa20 <fixTime+0x60>
		minutes = 0;
     a18:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <minutes+0x1>
     a1c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <minutes>
	}

	if(seconds > 59){
     a20:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <seconds>
     a24:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <seconds+0x1>
     a28:	cc 97       	sbiw	r24, 0x3c	; 60
     a2a:	c4 f1       	brlt	.+112    	; 0xa9c <fixTime+0xdc>
		seconds = 0;
     a2c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <seconds+0x1>
     a30:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <seconds>
	}

	if(days > 28){
     a34:	c0 91 66 00 	lds	r28, 0x0066	; 0x800066 <days>
     a38:	d0 91 67 00 	lds	r29, 0x0067	; 0x800067 <days+0x1>
     a3c:	cd 31       	cpi	r28, 0x1D	; 29
     a3e:	d1 05       	cpc	r29, r1
     a40:	0c f4       	brge	.+2      	; 0xa44 <fixTime+0x84>
     a42:	45 c0       	rjmp	.+138    	; 0xace <fixTime+0x10e>
		if(days > 28 && months == 2 && !(isLeap()))
     a44:	00 91 64 00 	lds	r16, 0x0064	; 0x800064 <months>
     a48:	10 91 65 00 	lds	r17, 0x0065	; 0x800065 <months+0x1>
     a4c:	02 30       	cpi	r16, 0x02	; 2
     a4e:	11 05       	cpc	r17, r1
     a50:	59 f4       	brne	.+22     	; 0xa68 <fixTime+0xa8>
     a52:	0e 94 35 01 	call	0x26a	; 0x26a <isLeap>
     a56:	89 2b       	or	r24, r25
     a58:	81 f5       	brne	.+96     	; 0xaba <fixTime+0xfa>
			days = 1;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <days+0x1>
     a62:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <days>
     a66:	33 c0       	rjmp	.+102    	; 0xace <fixTime+0x10e>
			
		else if(days > 29 && months == 2 && isLeap())
			days = 1;
			
		else if(days > 30 && (months == 4 || months == 6 || months == 9 || months == 11))
     a68:	cf 31       	cpi	r28, 0x1F	; 31
     a6a:	d1 05       	cpc	r29, r1
     a6c:	74 f0       	brlt	.+28     	; 0xa8a <fixTime+0xca>
     a6e:	0d 7f       	andi	r16, 0xFD	; 253
     a70:	04 30       	cpi	r16, 0x04	; 4
     a72:	11 05       	cpc	r17, r1
     a74:	19 f0       	breq	.+6      	; 0xa7c <fixTime+0xbc>
     a76:	09 30       	cpi	r16, 0x09	; 9
     a78:	11 05       	cpc	r17, r1
     a7a:	39 f4       	brne	.+14     	; 0xa8a <fixTime+0xca>
			days = 1;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <days+0x1>
     a84:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <days>
     a88:	22 c0       	rjmp	.+68     	; 0xace <fixTime+0x10e>
			
		else if(days > 31)
     a8a:	a0 97       	sbiw	r28, 0x20	; 32
     a8c:	04 f1       	brlt	.+64     	; 0xace <fixTime+0x10e>
			days = 1;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <days+0x1>
     a96:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <days>
			
	}
}
     a9a:	19 c0       	rjmp	.+50     	; 0xace <fixTime+0x10e>

	if(seconds > 59){
		seconds = 0;
	}

	if(days > 28){
     a9c:	c0 91 66 00 	lds	r28, 0x0066	; 0x800066 <days>
     aa0:	d0 91 67 00 	lds	r29, 0x0067	; 0x800067 <days+0x1>
     aa4:	cd 31       	cpi	r28, 0x1D	; 29
     aa6:	d1 05       	cpc	r29, r1
     aa8:	6c f6       	brge	.-102    	; 0xa44 <fixTime+0x84>
     aaa:	11 c0       	rjmp	.+34     	; 0xace <fixTime+0x10e>
		if(days > 28 && months == 2 && !(isLeap()))
			days = 1;
			
		else if(days > 29 && months == 2 && isLeap())
			days = 1;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <days+0x1>
     ab4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <days>
     ab8:	0a c0       	rjmp	.+20     	; 0xace <fixTime+0x10e>

	if(days > 28){
		if(days > 28 && months == 2 && !(isLeap()))
			days = 1;
			
		else if(days > 29 && months == 2 && isLeap())
     aba:	ce 31       	cpi	r28, 0x1E	; 30
     abc:	d1 05       	cpc	r29, r1
     abe:	1c f0       	brlt	.+6      	; 0xac6 <fixTime+0x106>
     ac0:	f5 cf       	rjmp	.-22     	; 0xaac <fixTime+0xec>
			days = 1;
			
		else if(days > 30 && (months == 4 || months == 6 || months == 9 || months == 11))
     ac2:	0d 7f       	andi	r16, 0xFD	; 253
     ac4:	d8 cf       	rjmp	.-80     	; 0xa76 <fixTime+0xb6>
     ac6:	cf 31       	cpi	r28, 0x1F	; 31
     ac8:	d1 05       	cpc	r29, r1
     aca:	fc f2       	brlt	.-66     	; 0xa8a <fixTime+0xca>
     acc:	fa cf       	rjmp	.-12     	; 0xac2 <fixTime+0x102>
			
		else if(days > 31)
			days = 1;
			
	}
}
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	08 95       	ret

00000ad8 <main>:
#include "avr.h"

void
avr_init(void)
{
  WDTCR = 15;
     ad8:	8f e0       	ldi	r24, 0x0F	; 15
     ada:	81 bd       	out	0x21, r24	; 33

int main(void)
{
	avr_init();
	lcd_init();
     adc:	0e 94 89 00 	call	0x112	; 0x112 <lcd_init>
	int timerON = 0;
	outputLCD();
     ae0:	0e 94 1d 02 	call	0x43a	; 0x43a <outputLCD>

int main(void)
{
	avr_init();
	lcd_init();
	int timerON = 0;
     ae4:	00 e0       	ldi	r16, 0x00	; 0
     ae6:	10 e0       	ldi	r17, 0x00	; 0
				default:
					break;
			}
			fixTime();
			
			outputLCD2();
     ae8:	e1 2c       	mov	r14, r1
     aea:	f1 2c       	mov	r15, r1
					break;
				case 8:
					militaryON = 0;
					break;
				case 13:
					timerON = 1;
     aec:	cc 24       	eor	r12, r12
     aee:	c3 94       	inc	r12
     af0:	d1 2c       	mov	r13, r1
					break;
				case 14:
					if(!(timerON)) {
						days = 0;
						months = 0;
						years = 2010;
     af2:	0f 2e       	mov	r0, r31
     af4:	fa ed       	ldi	r31, 0xDA	; 218
     af6:	af 2e       	mov	r10, r31
     af8:	f7 e0       	ldi	r31, 0x07	; 7
     afa:	bf 2e       	mov	r11, r31
     afc:	f0 2d       	mov	r31, r0
			5 button (key 6) = increment minutes
			6 button (key 7) = increment seconds
			0 button (key 14) = Reset clock
			
		*/
			int key = get_key();
     afe:	0e 94 0e 01 	call	0x21c	; 0x21c <get_key>
     b02:	ec 01       	movw	r28, r24
			avr_wait(150);
     b04:	86 e9       	ldi	r24, 0x96	; 150
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 77 00 	call	0xee	; 0xee <avr_wait>
			switch(key) 
     b0c:	fe 01       	movw	r30, r28
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	ef 30       	cpi	r30, 0x0F	; 15
     b12:	f1 05       	cpc	r31, r1
     b14:	08 f0       	brcs	.+2      	; 0xb18 <main+0x40>
     b16:	0e c1       	rjmp	.+540    	; 0xd34 <main+0x25c>
     b18:	e6 5d       	subi	r30, 0xD6	; 214
     b1a:	ff 4f       	sbci	r31, 0xFF	; 255
     b1c:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__tablejump2__>
			{
				case 1: 
					if(!(timerON)) {
     b20:	01 15       	cp	r16, r1
     b22:	11 05       	cpc	r17, r1
     b24:	09 f0       	breq	.+2      	; 0xb28 <main+0x50>
     b26:	15 c1       	rjmp	.+554    	; 0xd52 <main+0x27a>
						blinkdays = 1;
     b28:	c0 92 44 01 	sts	0x0144, r12	; 0x800144 <blinkdays>
     b2c:	d0 92 45 01 	sts	0x0145, r13	; 0x800145 <blinkdays+0x1>
						blinkmonths = 0;
     b30:	e0 92 42 01 	sts	0x0142, r14	; 0x800142 <blinkmonths>
     b34:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <blinkmonths+0x1>
						blinkyears = 0;
     b38:	e0 92 40 01 	sts	0x0140, r14	; 0x800140 <blinkyears>
     b3c:	f0 92 41 01 	sts	0x0141, r15	; 0x800141 <blinkyears+0x1>
						blinkhours = 0;
     b40:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <blinkhours>
     b44:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <blinkhours+0x1>
						blinkminutes = 0;
     b48:	e0 92 3c 01 	sts	0x013C, r14	; 0x80013c <blinkminutes>
     b4c:	f0 92 3d 01 	sts	0x013D, r15	; 0x80013d <blinkminutes+0x1>
						blinkseconds = 0;
     b50:	e0 92 3a 01 	sts	0x013A, r14	; 0x80013a <__data_end>
     b54:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <__data_end+0x1>
						days++;
     b58:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <days>
     b5c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <days+0x1>
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <days+0x1>
     b66:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <days>
     b6a:	f8 c0       	rjmp	.+496    	; 0xd5c <main+0x284>
					}
					break;
				case 2:
					if(!(timerON)) {
     b6c:	01 15       	cp	r16, r1
     b6e:	11 05       	cpc	r17, r1
     b70:	09 f0       	breq	.+2      	; 0xb74 <main+0x9c>
     b72:	ef c0       	rjmp	.+478    	; 0xd52 <main+0x27a>
						blinkdays = 0;
     b74:	e0 92 44 01 	sts	0x0144, r14	; 0x800144 <blinkdays>
     b78:	f0 92 45 01 	sts	0x0145, r15	; 0x800145 <blinkdays+0x1>
						blinkmonths = 1;
     b7c:	c0 92 42 01 	sts	0x0142, r12	; 0x800142 <blinkmonths>
     b80:	d0 92 43 01 	sts	0x0143, r13	; 0x800143 <blinkmonths+0x1>
						blinkyears = 0;
     b84:	e0 92 40 01 	sts	0x0140, r14	; 0x800140 <blinkyears>
     b88:	f0 92 41 01 	sts	0x0141, r15	; 0x800141 <blinkyears+0x1>
						blinkhours = 0;
     b8c:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <blinkhours>
     b90:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <blinkhours+0x1>
						blinkminutes = 0;
     b94:	e0 92 3c 01 	sts	0x013C, r14	; 0x80013c <blinkminutes>
     b98:	f0 92 3d 01 	sts	0x013D, r15	; 0x80013d <blinkminutes+0x1>
						blinkseconds = 0;
     b9c:	e0 92 3a 01 	sts	0x013A, r14	; 0x80013a <__data_end>
     ba0:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <__data_end+0x1>
						months++;
     ba4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <months>
     ba8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <months+0x1>
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <months+0x1>
     bb2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <months>
     bb6:	d2 c0       	rjmp	.+420    	; 0xd5c <main+0x284>
					}
					break;
				case 3:
					if(!(timerON)) {
     bb8:	01 15       	cp	r16, r1
     bba:	11 05       	cpc	r17, r1
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <main+0xe8>
     bbe:	c9 c0       	rjmp	.+402    	; 0xd52 <main+0x27a>
						blinkdays = 0;
     bc0:	e0 92 44 01 	sts	0x0144, r14	; 0x800144 <blinkdays>
     bc4:	f0 92 45 01 	sts	0x0145, r15	; 0x800145 <blinkdays+0x1>
						blinkmonths = 0;
     bc8:	e0 92 42 01 	sts	0x0142, r14	; 0x800142 <blinkmonths>
     bcc:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <blinkmonths+0x1>
						blinkyears = 1;
     bd0:	c0 92 40 01 	sts	0x0140, r12	; 0x800140 <blinkyears>
     bd4:	d0 92 41 01 	sts	0x0141, r13	; 0x800141 <blinkyears+0x1>
						blinkhours = 0;
     bd8:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <blinkhours>
     bdc:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <blinkhours+0x1>
						blinkminutes = 0;
     be0:	e0 92 3c 01 	sts	0x013C, r14	; 0x80013c <blinkminutes>
     be4:	f0 92 3d 01 	sts	0x013D, r15	; 0x80013d <blinkminutes+0x1>
						blinkseconds = 0;
     be8:	e0 92 3a 01 	sts	0x013A, r14	; 0x80013a <__data_end>
     bec:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <__data_end+0x1>
						years++;
     bf0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <years>
     bf4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <years+0x1>
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <years+0x1>
     bfe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <years>
     c02:	ac c0       	rjmp	.+344    	; 0xd5c <main+0x284>
					}
					break;
				case 4:
					militaryON = 1;
     c04:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__data_start>
     c08:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__data_start+0x1>
					break;
     c0c:	93 c0       	rjmp	.+294    	; 0xd34 <main+0x25c>
				case 5:
					if(!(timerON)) {
     c0e:	01 15       	cp	r16, r1
     c10:	11 05       	cpc	r17, r1
     c12:	09 f0       	breq	.+2      	; 0xc16 <main+0x13e>
     c14:	9e c0       	rjmp	.+316    	; 0xd52 <main+0x27a>
						blinkdays = 0;
     c16:	e0 92 44 01 	sts	0x0144, r14	; 0x800144 <blinkdays>
     c1a:	f0 92 45 01 	sts	0x0145, r15	; 0x800145 <blinkdays+0x1>
						blinkmonths = 0;
     c1e:	e0 92 42 01 	sts	0x0142, r14	; 0x800142 <blinkmonths>
     c22:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <blinkmonths+0x1>
						blinkyears = 0;
     c26:	e0 92 40 01 	sts	0x0140, r14	; 0x800140 <blinkyears>
     c2a:	f0 92 41 01 	sts	0x0141, r15	; 0x800141 <blinkyears+0x1>
						blinkhours = 1;
     c2e:	c0 92 3e 01 	sts	0x013E, r12	; 0x80013e <blinkhours>
     c32:	d0 92 3f 01 	sts	0x013F, r13	; 0x80013f <blinkhours+0x1>
						blinkminutes = 0;
     c36:	e0 92 3c 01 	sts	0x013C, r14	; 0x80013c <blinkminutes>
     c3a:	f0 92 3d 01 	sts	0x013D, r15	; 0x80013d <blinkminutes+0x1>
						blinkseconds = 0;
     c3e:	e0 92 3a 01 	sts	0x013A, r14	; 0x80013a <__data_end>
     c42:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <__data_end+0x1>
						hours++;
     c46:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <hours>
     c4a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <hours+0x1>
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <hours+0x1>
     c54:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <hours>
     c58:	81 c0       	rjmp	.+258    	; 0xd5c <main+0x284>
					}
					break;
				case 6:
					if(!(timerON)) {
     c5a:	01 15       	cp	r16, r1
     c5c:	11 05       	cpc	r17, r1
     c5e:	09 f0       	breq	.+2      	; 0xc62 <main+0x18a>
     c60:	78 c0       	rjmp	.+240    	; 0xd52 <main+0x27a>
						blinkdays = 0;
     c62:	e0 92 44 01 	sts	0x0144, r14	; 0x800144 <blinkdays>
     c66:	f0 92 45 01 	sts	0x0145, r15	; 0x800145 <blinkdays+0x1>
						blinkmonths = 0;
     c6a:	e0 92 42 01 	sts	0x0142, r14	; 0x800142 <blinkmonths>
     c6e:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <blinkmonths+0x1>
						blinkyears = 0;
     c72:	e0 92 40 01 	sts	0x0140, r14	; 0x800140 <blinkyears>
     c76:	f0 92 41 01 	sts	0x0141, r15	; 0x800141 <blinkyears+0x1>
						blinkhours = 0;
     c7a:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <blinkhours>
     c7e:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <blinkhours+0x1>
						blinkminutes = 1;
     c82:	c0 92 3c 01 	sts	0x013C, r12	; 0x80013c <blinkminutes>
     c86:	d0 92 3d 01 	sts	0x013D, r13	; 0x80013d <blinkminutes+0x1>
						blinkseconds = 0;
     c8a:	e0 92 3a 01 	sts	0x013A, r14	; 0x80013a <__data_end>
     c8e:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <__data_end+0x1>
						minutes++;
     c92:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
     c96:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <minutes+0x1>
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <minutes+0x1>
     ca0:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <minutes>
     ca4:	5b c0       	rjmp	.+182    	; 0xd5c <main+0x284>
					}
					break;
				case 7:
					if(!(timerON)) {
     ca6:	01 15       	cp	r16, r1
     ca8:	11 05       	cpc	r17, r1
     caa:	09 f0       	breq	.+2      	; 0xcae <main+0x1d6>
     cac:	52 c0       	rjmp	.+164    	; 0xd52 <main+0x27a>
						blinkdays = 0;
     cae:	e0 92 44 01 	sts	0x0144, r14	; 0x800144 <blinkdays>
     cb2:	f0 92 45 01 	sts	0x0145, r15	; 0x800145 <blinkdays+0x1>
						blinkmonths = 0;
     cb6:	e0 92 42 01 	sts	0x0142, r14	; 0x800142 <blinkmonths>
     cba:	f0 92 43 01 	sts	0x0143, r15	; 0x800143 <blinkmonths+0x1>
						blinkyears = 0;
     cbe:	e0 92 40 01 	sts	0x0140, r14	; 0x800140 <blinkyears>
     cc2:	f0 92 41 01 	sts	0x0141, r15	; 0x800141 <blinkyears+0x1>
						blinkhours = 0;
     cc6:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <blinkhours>
     cca:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <blinkhours+0x1>
						blinkminutes = 0;
     cce:	e0 92 3c 01 	sts	0x013C, r14	; 0x80013c <blinkminutes>
     cd2:	f0 92 3d 01 	sts	0x013D, r15	; 0x80013d <blinkminutes+0x1>
						blinkseconds = 1;
     cd6:	c0 92 3a 01 	sts	0x013A, r12	; 0x80013a <__data_end>
     cda:	d0 92 3b 01 	sts	0x013B, r13	; 0x80013b <__data_end+0x1>
						seconds++;
     cde:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <seconds>
     ce2:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <seconds+0x1>
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <seconds+0x1>
     cec:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <seconds>
     cf0:	35 c0       	rjmp	.+106    	; 0xd5c <main+0x284>
					}
					break;
				case 8:
					militaryON = 0;
     cf2:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__data_start>
     cf6:	f0 92 61 00 	sts	0x0061, r15	; 0x800061 <__data_start+0x1>
					break;
     cfa:	1c c0       	rjmp	.+56     	; 0xd34 <main+0x25c>
				case 13:
					timerON = 1;
					break;
				case 14:
					if(!(timerON)) {
     cfc:	01 15       	cp	r16, r1
     cfe:	11 05       	cpc	r17, r1
     d00:	41 f5       	brne	.+80     	; 0xd52 <main+0x27a>
						days = 0;
     d02:	e0 92 66 00 	sts	0x0066, r14	; 0x800066 <days>
     d06:	f0 92 67 00 	sts	0x0067, r15	; 0x800067 <days+0x1>
						months = 0;
     d0a:	e0 92 64 00 	sts	0x0064, r14	; 0x800064 <months>
     d0e:	f0 92 65 00 	sts	0x0065, r15	; 0x800065 <months+0x1>
						years = 2010;
     d12:	b0 92 63 00 	sts	0x0063, r11	; 0x800063 <years+0x1>
     d16:	a0 92 62 00 	sts	0x0062, r10	; 0x800062 <years>
						hours = 0;
     d1a:	e0 92 46 01 	sts	0x0146, r14	; 0x800146 <hours>
     d1e:	f0 92 47 01 	sts	0x0147, r15	; 0x800147 <hours+0x1>
						minutes = 0;
     d22:	e0 92 48 01 	sts	0x0148, r14	; 0x800148 <minutes>
     d26:	f0 92 49 01 	sts	0x0149, r15	; 0x800149 <minutes+0x1>
						seconds = 0;
     d2a:	e0 92 4a 01 	sts	0x014A, r14	; 0x80014a <seconds>
     d2e:	f0 92 4b 01 	sts	0x014B, r15	; 0x80014b <seconds+0x1>
     d32:	14 c0       	rjmp	.+40     	; 0xd5c <main+0x284>
					timerON = 0;
					break;
				default:
					break;
			}
			fixTime();
     d34:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fixTime>
			
			outputLCD2();
     d38:	0e 94 d7 02 	call	0x5ae	; 0x5ae <outputLCD2>
			//lcd_clr();

			//avr_wait(200);
			if(timerON) 
     d3c:	01 15       	cp	r16, r1
     d3e:	11 05       	cpc	r17, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <main+0x26c>
     d42:	dd ce       	rjmp	.-582    	; 0xafe <main+0x26>
			{
				outputLCD();
     d44:	0e 94 1d 02 	call	0x43a	; 0x43a <outputLCD>
				//avr_wait(500);
				incrementTime();
     d48:	0e 94 58 01 	call	0x2b0	; 0x2b0 <incrementTime>
     d4c:	d8 ce       	rjmp	.-592    	; 0xafe <main+0x26>
					break;
				case 8:
					militaryON = 0;
					break;
				case 13:
					timerON = 1;
     d4e:	0c 2d       	mov	r16, r12
     d50:	1d 2d       	mov	r17, r13
					timerON = 0;
					break;
				default:
					break;
			}
			fixTime();
     d52:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fixTime>
			
			outputLCD2();
     d56:	0e 94 d7 02 	call	0x5ae	; 0x5ae <outputLCD2>
     d5a:	f4 cf       	rjmp	.-24     	; 0xd44 <main+0x26c>
					timerON = 0;
					break;
				default:
					break;
			}
			fixTime();
     d5c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <fixTime>
			
			outputLCD2();
     d60:	0e 94 d7 02 	call	0x5ae	; 0x5ae <outputLCD2>
     d64:	0e 2d       	mov	r16, r14
     d66:	1f 2d       	mov	r17, r15
     d68:	ca ce       	rjmp	.-620    	; 0xafe <main+0x26>

00000d6a <__divmodhi4>:
     d6a:	97 fb       	bst	r25, 7
     d6c:	07 2e       	mov	r0, r23
     d6e:	16 f4       	brtc	.+4      	; 0xd74 <__divmodhi4+0xa>
     d70:	00 94       	com	r0
     d72:	07 d0       	rcall	.+14     	; 0xd82 <__divmodhi4_neg1>
     d74:	77 fd       	sbrc	r23, 7
     d76:	09 d0       	rcall	.+18     	; 0xd8a <__divmodhi4_neg2>
     d78:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__udivmodhi4>
     d7c:	07 fc       	sbrc	r0, 7
     d7e:	05 d0       	rcall	.+10     	; 0xd8a <__divmodhi4_neg2>
     d80:	3e f4       	brtc	.+14     	; 0xd90 <__divmodhi4_exit>

00000d82 <__divmodhi4_neg1>:
     d82:	90 95       	com	r25
     d84:	81 95       	neg	r24
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	08 95       	ret

00000d8a <__divmodhi4_neg2>:
     d8a:	70 95       	com	r23
     d8c:	61 95       	neg	r22
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255

00000d90 <__divmodhi4_exit>:
     d90:	08 95       	ret

00000d92 <__tablejump2__>:
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	05 90       	lpm	r0, Z+
     d98:	f4 91       	lpm	r31, Z
     d9a:	e0 2d       	mov	r30, r0
     d9c:	09 94       	ijmp

00000d9e <__udivmodhi4>:
     d9e:	aa 1b       	sub	r26, r26
     da0:	bb 1b       	sub	r27, r27
     da2:	51 e1       	ldi	r21, 0x11	; 17
     da4:	07 c0       	rjmp	.+14     	; 0xdb4 <__udivmodhi4_ep>

00000da6 <__udivmodhi4_loop>:
     da6:	aa 1f       	adc	r26, r26
     da8:	bb 1f       	adc	r27, r27
     daa:	a6 17       	cp	r26, r22
     dac:	b7 07       	cpc	r27, r23
     dae:	10 f0       	brcs	.+4      	; 0xdb4 <__udivmodhi4_ep>
     db0:	a6 1b       	sub	r26, r22
     db2:	b7 0b       	sbc	r27, r23

00000db4 <__udivmodhi4_ep>:
     db4:	88 1f       	adc	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	5a 95       	dec	r21
     dba:	a9 f7       	brne	.-22     	; 0xda6 <__udivmodhi4_loop>
     dbc:	80 95       	com	r24
     dbe:	90 95       	com	r25
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	08 95       	ret

00000dc6 <sprintf>:
     dc6:	ae e0       	ldi	r26, 0x0E	; 14
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e9 ee       	ldi	r30, 0xE9	; 233
     dcc:	f6 e0       	ldi	r31, 0x06	; 6
     dce:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__prologue_saves__+0x1c>
     dd2:	0d 89       	ldd	r16, Y+21	; 0x15
     dd4:	1e 89       	ldd	r17, Y+22	; 0x16
     dd6:	86 e0       	ldi	r24, 0x06	; 6
     dd8:	8c 83       	std	Y+4, r24	; 0x04
     dda:	1a 83       	std	Y+2, r17	; 0x02
     ddc:	09 83       	std	Y+1, r16	; 0x01
     dde:	8f ef       	ldi	r24, 0xFF	; 255
     de0:	9f e7       	ldi	r25, 0x7F	; 127
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
     de6:	ae 01       	movw	r20, r28
     de8:	47 5e       	subi	r20, 0xE7	; 231
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
     dec:	6f 89       	ldd	r22, Y+23	; 0x17
     dee:	78 8d       	ldd	r23, Y+24	; 0x18
     df0:	ce 01       	movw	r24, r28
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	0e 94 05 07 	call	0xe0a	; 0xe0a <vfprintf>
     df8:	ef 81       	ldd	r30, Y+7	; 0x07
     dfa:	f8 85       	ldd	r31, Y+8	; 0x08
     dfc:	e0 0f       	add	r30, r16
     dfe:	f1 1f       	adc	r31, r17
     e00:	10 82       	st	Z, r1
     e02:	2e 96       	adiw	r28, 0x0e	; 14
     e04:	e4 e0       	ldi	r30, 0x04	; 4
     e06:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__epilogue_restores__+0x1c>

00000e0a <vfprintf>:
     e0a:	ab e0       	ldi	r26, 0x0B	; 11
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	eb e0       	ldi	r30, 0x0B	; 11
     e10:	f7 e0       	ldi	r31, 0x07	; 7
     e12:	0c 94 96 09 	jmp	0x132c	; 0x132c <__prologue_saves__>
     e16:	6c 01       	movw	r12, r24
     e18:	7b 01       	movw	r14, r22
     e1a:	8a 01       	movw	r16, r20
     e1c:	fc 01       	movw	r30, r24
     e1e:	17 82       	std	Z+7, r1	; 0x07
     e20:	16 82       	std	Z+6, r1	; 0x06
     e22:	83 81       	ldd	r24, Z+3	; 0x03
     e24:	81 ff       	sbrs	r24, 1
     e26:	cc c1       	rjmp	.+920    	; 0x11c0 <vfprintf+0x3b6>
     e28:	ce 01       	movw	r24, r28
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	3c 01       	movw	r6, r24
     e2e:	f6 01       	movw	r30, r12
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	f7 01       	movw	r30, r14
     e34:	93 fd       	sbrc	r25, 3
     e36:	85 91       	lpm	r24, Z+
     e38:	93 ff       	sbrs	r25, 3
     e3a:	81 91       	ld	r24, Z+
     e3c:	7f 01       	movw	r14, r30
     e3e:	88 23       	and	r24, r24
     e40:	09 f4       	brne	.+2      	; 0xe44 <vfprintf+0x3a>
     e42:	ba c1       	rjmp	.+884    	; 0x11b8 <vfprintf+0x3ae>
     e44:	85 32       	cpi	r24, 0x25	; 37
     e46:	39 f4       	brne	.+14     	; 0xe56 <vfprintf+0x4c>
     e48:	93 fd       	sbrc	r25, 3
     e4a:	85 91       	lpm	r24, Z+
     e4c:	93 ff       	sbrs	r25, 3
     e4e:	81 91       	ld	r24, Z+
     e50:	7f 01       	movw	r14, r30
     e52:	85 32       	cpi	r24, 0x25	; 37
     e54:	29 f4       	brne	.+10     	; 0xe60 <vfprintf+0x56>
     e56:	b6 01       	movw	r22, r12
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <fputc>
     e5e:	e7 cf       	rjmp	.-50     	; 0xe2e <vfprintf+0x24>
     e60:	91 2c       	mov	r9, r1
     e62:	21 2c       	mov	r2, r1
     e64:	31 2c       	mov	r3, r1
     e66:	ff e1       	ldi	r31, 0x1F	; 31
     e68:	f3 15       	cp	r31, r3
     e6a:	d8 f0       	brcs	.+54     	; 0xea2 <vfprintf+0x98>
     e6c:	8b 32       	cpi	r24, 0x2B	; 43
     e6e:	79 f0       	breq	.+30     	; 0xe8e <vfprintf+0x84>
     e70:	38 f4       	brcc	.+14     	; 0xe80 <vfprintf+0x76>
     e72:	80 32       	cpi	r24, 0x20	; 32
     e74:	79 f0       	breq	.+30     	; 0xe94 <vfprintf+0x8a>
     e76:	83 32       	cpi	r24, 0x23	; 35
     e78:	a1 f4       	brne	.+40     	; 0xea2 <vfprintf+0x98>
     e7a:	23 2d       	mov	r18, r3
     e7c:	20 61       	ori	r18, 0x10	; 16
     e7e:	1d c0       	rjmp	.+58     	; 0xeba <vfprintf+0xb0>
     e80:	8d 32       	cpi	r24, 0x2D	; 45
     e82:	61 f0       	breq	.+24     	; 0xe9c <vfprintf+0x92>
     e84:	80 33       	cpi	r24, 0x30	; 48
     e86:	69 f4       	brne	.+26     	; 0xea2 <vfprintf+0x98>
     e88:	23 2d       	mov	r18, r3
     e8a:	21 60       	ori	r18, 0x01	; 1
     e8c:	16 c0       	rjmp	.+44     	; 0xeba <vfprintf+0xb0>
     e8e:	83 2d       	mov	r24, r3
     e90:	82 60       	ori	r24, 0x02	; 2
     e92:	38 2e       	mov	r3, r24
     e94:	e3 2d       	mov	r30, r3
     e96:	e4 60       	ori	r30, 0x04	; 4
     e98:	3e 2e       	mov	r3, r30
     e9a:	2a c0       	rjmp	.+84     	; 0xef0 <vfprintf+0xe6>
     e9c:	f3 2d       	mov	r31, r3
     e9e:	f8 60       	ori	r31, 0x08	; 8
     ea0:	1d c0       	rjmp	.+58     	; 0xedc <vfprintf+0xd2>
     ea2:	37 fc       	sbrc	r3, 7
     ea4:	2d c0       	rjmp	.+90     	; 0xf00 <vfprintf+0xf6>
     ea6:	20 ed       	ldi	r18, 0xD0	; 208
     ea8:	28 0f       	add	r18, r24
     eaa:	2a 30       	cpi	r18, 0x0A	; 10
     eac:	40 f0       	brcs	.+16     	; 0xebe <vfprintf+0xb4>
     eae:	8e 32       	cpi	r24, 0x2E	; 46
     eb0:	b9 f4       	brne	.+46     	; 0xee0 <vfprintf+0xd6>
     eb2:	36 fc       	sbrc	r3, 6
     eb4:	81 c1       	rjmp	.+770    	; 0x11b8 <vfprintf+0x3ae>
     eb6:	23 2d       	mov	r18, r3
     eb8:	20 64       	ori	r18, 0x40	; 64
     eba:	32 2e       	mov	r3, r18
     ebc:	19 c0       	rjmp	.+50     	; 0xef0 <vfprintf+0xe6>
     ebe:	36 fe       	sbrs	r3, 6
     ec0:	06 c0       	rjmp	.+12     	; 0xece <vfprintf+0xc4>
     ec2:	8a e0       	ldi	r24, 0x0A	; 10
     ec4:	98 9e       	mul	r9, r24
     ec6:	20 0d       	add	r18, r0
     ec8:	11 24       	eor	r1, r1
     eca:	92 2e       	mov	r9, r18
     ecc:	11 c0       	rjmp	.+34     	; 0xef0 <vfprintf+0xe6>
     ece:	ea e0       	ldi	r30, 0x0A	; 10
     ed0:	2e 9e       	mul	r2, r30
     ed2:	20 0d       	add	r18, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	22 2e       	mov	r2, r18
     ed8:	f3 2d       	mov	r31, r3
     eda:	f0 62       	ori	r31, 0x20	; 32
     edc:	3f 2e       	mov	r3, r31
     ede:	08 c0       	rjmp	.+16     	; 0xef0 <vfprintf+0xe6>
     ee0:	8c 36       	cpi	r24, 0x6C	; 108
     ee2:	21 f4       	brne	.+8      	; 0xeec <vfprintf+0xe2>
     ee4:	83 2d       	mov	r24, r3
     ee6:	80 68       	ori	r24, 0x80	; 128
     ee8:	38 2e       	mov	r3, r24
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <vfprintf+0xe6>
     eec:	88 36       	cpi	r24, 0x68	; 104
     eee:	41 f4       	brne	.+16     	; 0xf00 <vfprintf+0xf6>
     ef0:	f7 01       	movw	r30, r14
     ef2:	93 fd       	sbrc	r25, 3
     ef4:	85 91       	lpm	r24, Z+
     ef6:	93 ff       	sbrs	r25, 3
     ef8:	81 91       	ld	r24, Z+
     efa:	7f 01       	movw	r14, r30
     efc:	81 11       	cpse	r24, r1
     efe:	b3 cf       	rjmp	.-154    	; 0xe66 <vfprintf+0x5c>
     f00:	98 2f       	mov	r25, r24
     f02:	9f 7d       	andi	r25, 0xDF	; 223
     f04:	95 54       	subi	r25, 0x45	; 69
     f06:	93 30       	cpi	r25, 0x03	; 3
     f08:	28 f4       	brcc	.+10     	; 0xf14 <vfprintf+0x10a>
     f0a:	0c 5f       	subi	r16, 0xFC	; 252
     f0c:	1f 4f       	sbci	r17, 0xFF	; 255
     f0e:	9f e3       	ldi	r25, 0x3F	; 63
     f10:	99 83       	std	Y+1, r25	; 0x01
     f12:	0d c0       	rjmp	.+26     	; 0xf2e <vfprintf+0x124>
     f14:	83 36       	cpi	r24, 0x63	; 99
     f16:	31 f0       	breq	.+12     	; 0xf24 <vfprintf+0x11a>
     f18:	83 37       	cpi	r24, 0x73	; 115
     f1a:	71 f0       	breq	.+28     	; 0xf38 <vfprintf+0x12e>
     f1c:	83 35       	cpi	r24, 0x53	; 83
     f1e:	09 f0       	breq	.+2      	; 0xf22 <vfprintf+0x118>
     f20:	59 c0       	rjmp	.+178    	; 0xfd4 <vfprintf+0x1ca>
     f22:	21 c0       	rjmp	.+66     	; 0xf66 <vfprintf+0x15c>
     f24:	f8 01       	movw	r30, r16
     f26:	80 81       	ld	r24, Z
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	0e 5f       	subi	r16, 0xFE	; 254
     f2c:	1f 4f       	sbci	r17, 0xFF	; 255
     f2e:	88 24       	eor	r8, r8
     f30:	83 94       	inc	r8
     f32:	91 2c       	mov	r9, r1
     f34:	53 01       	movw	r10, r6
     f36:	13 c0       	rjmp	.+38     	; 0xf5e <vfprintf+0x154>
     f38:	28 01       	movw	r4, r16
     f3a:	f2 e0       	ldi	r31, 0x02	; 2
     f3c:	4f 0e       	add	r4, r31
     f3e:	51 1c       	adc	r5, r1
     f40:	f8 01       	movw	r30, r16
     f42:	a0 80       	ld	r10, Z
     f44:	b1 80       	ldd	r11, Z+1	; 0x01
     f46:	36 fe       	sbrs	r3, 6
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <vfprintf+0x146>
     f4a:	69 2d       	mov	r22, r9
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <vfprintf+0x14a>
     f50:	6f ef       	ldi	r22, 0xFF	; 255
     f52:	7f ef       	ldi	r23, 0xFF	; 255
     f54:	c5 01       	movw	r24, r10
     f56:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <strnlen>
     f5a:	4c 01       	movw	r8, r24
     f5c:	82 01       	movw	r16, r4
     f5e:	f3 2d       	mov	r31, r3
     f60:	ff 77       	andi	r31, 0x7F	; 127
     f62:	3f 2e       	mov	r3, r31
     f64:	16 c0       	rjmp	.+44     	; 0xf92 <vfprintf+0x188>
     f66:	28 01       	movw	r4, r16
     f68:	22 e0       	ldi	r18, 0x02	; 2
     f6a:	42 0e       	add	r4, r18
     f6c:	51 1c       	adc	r5, r1
     f6e:	f8 01       	movw	r30, r16
     f70:	a0 80       	ld	r10, Z
     f72:	b1 80       	ldd	r11, Z+1	; 0x01
     f74:	36 fe       	sbrs	r3, 6
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <vfprintf+0x174>
     f78:	69 2d       	mov	r22, r9
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <vfprintf+0x178>
     f7e:	6f ef       	ldi	r22, 0xFF	; 255
     f80:	7f ef       	ldi	r23, 0xFF	; 255
     f82:	c5 01       	movw	r24, r10
     f84:	0e 94 e6 08 	call	0x11cc	; 0x11cc <strnlen_P>
     f88:	4c 01       	movw	r8, r24
     f8a:	f3 2d       	mov	r31, r3
     f8c:	f0 68       	ori	r31, 0x80	; 128
     f8e:	3f 2e       	mov	r3, r31
     f90:	82 01       	movw	r16, r4
     f92:	33 fc       	sbrc	r3, 3
     f94:	1b c0       	rjmp	.+54     	; 0xfcc <vfprintf+0x1c2>
     f96:	82 2d       	mov	r24, r2
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	88 16       	cp	r8, r24
     f9c:	99 06       	cpc	r9, r25
     f9e:	b0 f4       	brcc	.+44     	; 0xfcc <vfprintf+0x1c2>
     fa0:	b6 01       	movw	r22, r12
     fa2:	80 e2       	ldi	r24, 0x20	; 32
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <fputc>
     faa:	2a 94       	dec	r2
     fac:	f4 cf       	rjmp	.-24     	; 0xf96 <vfprintf+0x18c>
     fae:	f5 01       	movw	r30, r10
     fb0:	37 fc       	sbrc	r3, 7
     fb2:	85 91       	lpm	r24, Z+
     fb4:	37 fe       	sbrs	r3, 7
     fb6:	81 91       	ld	r24, Z+
     fb8:	5f 01       	movw	r10, r30
     fba:	b6 01       	movw	r22, r12
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <fputc>
     fc2:	21 10       	cpse	r2, r1
     fc4:	2a 94       	dec	r2
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	82 1a       	sub	r8, r18
     fca:	91 08       	sbc	r9, r1
     fcc:	81 14       	cp	r8, r1
     fce:	91 04       	cpc	r9, r1
     fd0:	71 f7       	brne	.-36     	; 0xfae <vfprintf+0x1a4>
     fd2:	e8 c0       	rjmp	.+464    	; 0x11a4 <vfprintf+0x39a>
     fd4:	84 36       	cpi	r24, 0x64	; 100
     fd6:	11 f0       	breq	.+4      	; 0xfdc <vfprintf+0x1d2>
     fd8:	89 36       	cpi	r24, 0x69	; 105
     fda:	41 f5       	brne	.+80     	; 0x102c <vfprintf+0x222>
     fdc:	f8 01       	movw	r30, r16
     fde:	37 fe       	sbrs	r3, 7
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <vfprintf+0x1e6>
     fe2:	60 81       	ld	r22, Z
     fe4:	71 81       	ldd	r23, Z+1	; 0x01
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	93 81       	ldd	r25, Z+3	; 0x03
     fea:	0c 5f       	subi	r16, 0xFC	; 252
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <vfprintf+0x1f6>
     ff0:	60 81       	ld	r22, Z
     ff2:	71 81       	ldd	r23, Z+1	; 0x01
     ff4:	07 2e       	mov	r0, r23
     ff6:	00 0c       	add	r0, r0
     ff8:	88 0b       	sbc	r24, r24
     ffa:	99 0b       	sbc	r25, r25
     ffc:	0e 5f       	subi	r16, 0xFE	; 254
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	f3 2d       	mov	r31, r3
    1002:	ff 76       	andi	r31, 0x6F	; 111
    1004:	3f 2e       	mov	r3, r31
    1006:	97 ff       	sbrs	r25, 7
    1008:	09 c0       	rjmp	.+18     	; 0x101c <vfprintf+0x212>
    100a:	90 95       	com	r25
    100c:	80 95       	com	r24
    100e:	70 95       	com	r23
    1010:	61 95       	neg	r22
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	8f 4f       	sbci	r24, 0xFF	; 255
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	f0 68       	ori	r31, 0x80	; 128
    101a:	3f 2e       	mov	r3, r31
    101c:	2a e0       	ldi	r18, 0x0A	; 10
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	a3 01       	movw	r20, r6
    1022:	0e 94 38 09 	call	0x1270	; 0x1270 <__ultoa_invert>
    1026:	88 2e       	mov	r8, r24
    1028:	86 18       	sub	r8, r6
    102a:	45 c0       	rjmp	.+138    	; 0x10b6 <vfprintf+0x2ac>
    102c:	85 37       	cpi	r24, 0x75	; 117
    102e:	31 f4       	brne	.+12     	; 0x103c <vfprintf+0x232>
    1030:	23 2d       	mov	r18, r3
    1032:	2f 7e       	andi	r18, 0xEF	; 239
    1034:	b2 2e       	mov	r11, r18
    1036:	2a e0       	ldi	r18, 0x0A	; 10
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	25 c0       	rjmp	.+74     	; 0x1086 <vfprintf+0x27c>
    103c:	93 2d       	mov	r25, r3
    103e:	99 7f       	andi	r25, 0xF9	; 249
    1040:	b9 2e       	mov	r11, r25
    1042:	8f 36       	cpi	r24, 0x6F	; 111
    1044:	c1 f0       	breq	.+48     	; 0x1076 <vfprintf+0x26c>
    1046:	18 f4       	brcc	.+6      	; 0x104e <vfprintf+0x244>
    1048:	88 35       	cpi	r24, 0x58	; 88
    104a:	79 f0       	breq	.+30     	; 0x106a <vfprintf+0x260>
    104c:	b5 c0       	rjmp	.+362    	; 0x11b8 <vfprintf+0x3ae>
    104e:	80 37       	cpi	r24, 0x70	; 112
    1050:	19 f0       	breq	.+6      	; 0x1058 <vfprintf+0x24e>
    1052:	88 37       	cpi	r24, 0x78	; 120
    1054:	21 f0       	breq	.+8      	; 0x105e <vfprintf+0x254>
    1056:	b0 c0       	rjmp	.+352    	; 0x11b8 <vfprintf+0x3ae>
    1058:	e9 2f       	mov	r30, r25
    105a:	e0 61       	ori	r30, 0x10	; 16
    105c:	be 2e       	mov	r11, r30
    105e:	b4 fe       	sbrs	r11, 4
    1060:	0d c0       	rjmp	.+26     	; 0x107c <vfprintf+0x272>
    1062:	fb 2d       	mov	r31, r11
    1064:	f4 60       	ori	r31, 0x04	; 4
    1066:	bf 2e       	mov	r11, r31
    1068:	09 c0       	rjmp	.+18     	; 0x107c <vfprintf+0x272>
    106a:	34 fe       	sbrs	r3, 4
    106c:	0a c0       	rjmp	.+20     	; 0x1082 <vfprintf+0x278>
    106e:	29 2f       	mov	r18, r25
    1070:	26 60       	ori	r18, 0x06	; 6
    1072:	b2 2e       	mov	r11, r18
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <vfprintf+0x278>
    1076:	28 e0       	ldi	r18, 0x08	; 8
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	05 c0       	rjmp	.+10     	; 0x1086 <vfprintf+0x27c>
    107c:	20 e1       	ldi	r18, 0x10	; 16
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <vfprintf+0x27c>
    1082:	20 e1       	ldi	r18, 0x10	; 16
    1084:	32 e0       	ldi	r19, 0x02	; 2
    1086:	f8 01       	movw	r30, r16
    1088:	b7 fe       	sbrs	r11, 7
    108a:	07 c0       	rjmp	.+14     	; 0x109a <vfprintf+0x290>
    108c:	60 81       	ld	r22, Z
    108e:	71 81       	ldd	r23, Z+1	; 0x01
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	0c 5f       	subi	r16, 0xFC	; 252
    1096:	1f 4f       	sbci	r17, 0xFF	; 255
    1098:	06 c0       	rjmp	.+12     	; 0x10a6 <vfprintf+0x29c>
    109a:	60 81       	ld	r22, Z
    109c:	71 81       	ldd	r23, Z+1	; 0x01
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 5f       	subi	r16, 0xFE	; 254
    10a4:	1f 4f       	sbci	r17, 0xFF	; 255
    10a6:	a3 01       	movw	r20, r6
    10a8:	0e 94 38 09 	call	0x1270	; 0x1270 <__ultoa_invert>
    10ac:	88 2e       	mov	r8, r24
    10ae:	86 18       	sub	r8, r6
    10b0:	fb 2d       	mov	r31, r11
    10b2:	ff 77       	andi	r31, 0x7F	; 127
    10b4:	3f 2e       	mov	r3, r31
    10b6:	36 fe       	sbrs	r3, 6
    10b8:	0d c0       	rjmp	.+26     	; 0x10d4 <vfprintf+0x2ca>
    10ba:	23 2d       	mov	r18, r3
    10bc:	2e 7f       	andi	r18, 0xFE	; 254
    10be:	a2 2e       	mov	r10, r18
    10c0:	89 14       	cp	r8, r9
    10c2:	58 f4       	brcc	.+22     	; 0x10da <vfprintf+0x2d0>
    10c4:	34 fe       	sbrs	r3, 4
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <vfprintf+0x2d4>
    10c8:	32 fc       	sbrc	r3, 2
    10ca:	09 c0       	rjmp	.+18     	; 0x10de <vfprintf+0x2d4>
    10cc:	83 2d       	mov	r24, r3
    10ce:	8e 7e       	andi	r24, 0xEE	; 238
    10d0:	a8 2e       	mov	r10, r24
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <vfprintf+0x2d4>
    10d4:	b8 2c       	mov	r11, r8
    10d6:	a3 2c       	mov	r10, r3
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <vfprintf+0x2d6>
    10da:	b8 2c       	mov	r11, r8
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <vfprintf+0x2d6>
    10de:	b9 2c       	mov	r11, r9
    10e0:	a4 fe       	sbrs	r10, 4
    10e2:	0f c0       	rjmp	.+30     	; 0x1102 <vfprintf+0x2f8>
    10e4:	fe 01       	movw	r30, r28
    10e6:	e8 0d       	add	r30, r8
    10e8:	f1 1d       	adc	r31, r1
    10ea:	80 81       	ld	r24, Z
    10ec:	80 33       	cpi	r24, 0x30	; 48
    10ee:	21 f4       	brne	.+8      	; 0x10f8 <vfprintf+0x2ee>
    10f0:	9a 2d       	mov	r25, r10
    10f2:	99 7e       	andi	r25, 0xE9	; 233
    10f4:	a9 2e       	mov	r10, r25
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <vfprintf+0x300>
    10f8:	a2 fe       	sbrs	r10, 2
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <vfprintf+0x2fe>
    10fc:	b3 94       	inc	r11
    10fe:	b3 94       	inc	r11
    1100:	04 c0       	rjmp	.+8      	; 0x110a <vfprintf+0x300>
    1102:	8a 2d       	mov	r24, r10
    1104:	86 78       	andi	r24, 0x86	; 134
    1106:	09 f0       	breq	.+2      	; 0x110a <vfprintf+0x300>
    1108:	b3 94       	inc	r11
    110a:	a3 fc       	sbrc	r10, 3
    110c:	11 c0       	rjmp	.+34     	; 0x1130 <vfprintf+0x326>
    110e:	a0 fe       	sbrs	r10, 0
    1110:	06 c0       	rjmp	.+12     	; 0x111e <vfprintf+0x314>
    1112:	b2 14       	cp	r11, r2
    1114:	88 f4       	brcc	.+34     	; 0x1138 <vfprintf+0x32e>
    1116:	28 0c       	add	r2, r8
    1118:	92 2c       	mov	r9, r2
    111a:	9b 18       	sub	r9, r11
    111c:	0e c0       	rjmp	.+28     	; 0x113a <vfprintf+0x330>
    111e:	b2 14       	cp	r11, r2
    1120:	60 f4       	brcc	.+24     	; 0x113a <vfprintf+0x330>
    1122:	b6 01       	movw	r22, r12
    1124:	80 e2       	ldi	r24, 0x20	; 32
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <fputc>
    112c:	b3 94       	inc	r11
    112e:	f7 cf       	rjmp	.-18     	; 0x111e <vfprintf+0x314>
    1130:	b2 14       	cp	r11, r2
    1132:	18 f4       	brcc	.+6      	; 0x113a <vfprintf+0x330>
    1134:	2b 18       	sub	r2, r11
    1136:	02 c0       	rjmp	.+4      	; 0x113c <vfprintf+0x332>
    1138:	98 2c       	mov	r9, r8
    113a:	21 2c       	mov	r2, r1
    113c:	a4 fe       	sbrs	r10, 4
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <vfprintf+0x356>
    1140:	b6 01       	movw	r22, r12
    1142:	80 e3       	ldi	r24, 0x30	; 48
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <fputc>
    114a:	a2 fe       	sbrs	r10, 2
    114c:	17 c0       	rjmp	.+46     	; 0x117c <vfprintf+0x372>
    114e:	a1 fc       	sbrc	r10, 1
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <vfprintf+0x34e>
    1152:	88 e7       	ldi	r24, 0x78	; 120
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 c0       	rjmp	.+4      	; 0x115c <vfprintf+0x352>
    1158:	88 e5       	ldi	r24, 0x58	; 88
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	b6 01       	movw	r22, r12
    115e:	0c c0       	rjmp	.+24     	; 0x1178 <vfprintf+0x36e>
    1160:	8a 2d       	mov	r24, r10
    1162:	86 78       	andi	r24, 0x86	; 134
    1164:	59 f0       	breq	.+22     	; 0x117c <vfprintf+0x372>
    1166:	a1 fe       	sbrs	r10, 1
    1168:	02 c0       	rjmp	.+4      	; 0x116e <vfprintf+0x364>
    116a:	8b e2       	ldi	r24, 0x2B	; 43
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <vfprintf+0x366>
    116e:	80 e2       	ldi	r24, 0x20	; 32
    1170:	a7 fc       	sbrc	r10, 7
    1172:	8d e2       	ldi	r24, 0x2D	; 45
    1174:	b6 01       	movw	r22, r12
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <fputc>
    117c:	89 14       	cp	r8, r9
    117e:	38 f4       	brcc	.+14     	; 0x118e <vfprintf+0x384>
    1180:	b6 01       	movw	r22, r12
    1182:	80 e3       	ldi	r24, 0x30	; 48
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <fputc>
    118a:	9a 94       	dec	r9
    118c:	f7 cf       	rjmp	.-18     	; 0x117c <vfprintf+0x372>
    118e:	8a 94       	dec	r8
    1190:	f3 01       	movw	r30, r6
    1192:	e8 0d       	add	r30, r8
    1194:	f1 1d       	adc	r31, r1
    1196:	80 81       	ld	r24, Z
    1198:	b6 01       	movw	r22, r12
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <fputc>
    11a0:	81 10       	cpse	r8, r1
    11a2:	f5 cf       	rjmp	.-22     	; 0x118e <vfprintf+0x384>
    11a4:	22 20       	and	r2, r2
    11a6:	09 f4       	brne	.+2      	; 0x11aa <vfprintf+0x3a0>
    11a8:	42 ce       	rjmp	.-892    	; 0xe2e <vfprintf+0x24>
    11aa:	b6 01       	movw	r22, r12
    11ac:	80 e2       	ldi	r24, 0x20	; 32
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <fputc>
    11b4:	2a 94       	dec	r2
    11b6:	f6 cf       	rjmp	.-20     	; 0x11a4 <vfprintf+0x39a>
    11b8:	f6 01       	movw	r30, r12
    11ba:	86 81       	ldd	r24, Z+6	; 0x06
    11bc:	97 81       	ldd	r25, Z+7	; 0x07
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <vfprintf+0x3ba>
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	9f ef       	ldi	r25, 0xFF	; 255
    11c4:	2b 96       	adiw	r28, 0x0b	; 11
    11c6:	e2 e1       	ldi	r30, 0x12	; 18
    11c8:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__epilogue_restores__>

000011cc <strnlen_P>:
    11cc:	fc 01       	movw	r30, r24
    11ce:	05 90       	lpm	r0, Z+
    11d0:	61 50       	subi	r22, 0x01	; 1
    11d2:	70 40       	sbci	r23, 0x00	; 0
    11d4:	01 10       	cpse	r0, r1
    11d6:	d8 f7       	brcc	.-10     	; 0x11ce <strnlen_P+0x2>
    11d8:	80 95       	com	r24
    11da:	90 95       	com	r25
    11dc:	8e 0f       	add	r24, r30
    11de:	9f 1f       	adc	r25, r31
    11e0:	08 95       	ret

000011e2 <strnlen>:
    11e2:	fc 01       	movw	r30, r24
    11e4:	61 50       	subi	r22, 0x01	; 1
    11e6:	70 40       	sbci	r23, 0x00	; 0
    11e8:	01 90       	ld	r0, Z+
    11ea:	01 10       	cpse	r0, r1
    11ec:	d8 f7       	brcc	.-10     	; 0x11e4 <strnlen+0x2>
    11ee:	80 95       	com	r24
    11f0:	90 95       	com	r25
    11f2:	8e 0f       	add	r24, r30
    11f4:	9f 1f       	adc	r25, r31
    11f6:	08 95       	ret

000011f8 <fputc>:
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	fb 01       	movw	r30, r22
    1202:	23 81       	ldd	r18, Z+3	; 0x03
    1204:	21 fd       	sbrc	r18, 1
    1206:	03 c0       	rjmp	.+6      	; 0x120e <fputc+0x16>
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	2c c0       	rjmp	.+88     	; 0x1266 <fputc+0x6e>
    120e:	22 ff       	sbrs	r18, 2
    1210:	16 c0       	rjmp	.+44     	; 0x123e <fputc+0x46>
    1212:	46 81       	ldd	r20, Z+6	; 0x06
    1214:	57 81       	ldd	r21, Z+7	; 0x07
    1216:	24 81       	ldd	r18, Z+4	; 0x04
    1218:	35 81       	ldd	r19, Z+5	; 0x05
    121a:	42 17       	cp	r20, r18
    121c:	53 07       	cpc	r21, r19
    121e:	44 f4       	brge	.+16     	; 0x1230 <fputc+0x38>
    1220:	a0 81       	ld	r26, Z
    1222:	b1 81       	ldd	r27, Z+1	; 0x01
    1224:	9d 01       	movw	r18, r26
    1226:	2f 5f       	subi	r18, 0xFF	; 255
    1228:	3f 4f       	sbci	r19, 0xFF	; 255
    122a:	31 83       	std	Z+1, r19	; 0x01
    122c:	20 83       	st	Z, r18
    122e:	8c 93       	st	X, r24
    1230:	26 81       	ldd	r18, Z+6	; 0x06
    1232:	37 81       	ldd	r19, Z+7	; 0x07
    1234:	2f 5f       	subi	r18, 0xFF	; 255
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	37 83       	std	Z+7, r19	; 0x07
    123a:	26 83       	std	Z+6, r18	; 0x06
    123c:	14 c0       	rjmp	.+40     	; 0x1266 <fputc+0x6e>
    123e:	8b 01       	movw	r16, r22
    1240:	ec 01       	movw	r28, r24
    1242:	fb 01       	movw	r30, r22
    1244:	00 84       	ldd	r0, Z+8	; 0x08
    1246:	f1 85       	ldd	r31, Z+9	; 0x09
    1248:	e0 2d       	mov	r30, r0
    124a:	09 95       	icall
    124c:	89 2b       	or	r24, r25
    124e:	e1 f6       	brne	.-72     	; 0x1208 <fputc+0x10>
    1250:	d8 01       	movw	r26, r16
    1252:	16 96       	adiw	r26, 0x06	; 6
    1254:	8d 91       	ld	r24, X+
    1256:	9c 91       	ld	r25, X
    1258:	17 97       	sbiw	r26, 0x07	; 7
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	17 96       	adiw	r26, 0x07	; 7
    125e:	9c 93       	st	X, r25
    1260:	8e 93       	st	-X, r24
    1262:	16 97       	sbiw	r26, 0x06	; 6
    1264:	ce 01       	movw	r24, r28
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	08 95       	ret

00001270 <__ultoa_invert>:
    1270:	fa 01       	movw	r30, r20
    1272:	aa 27       	eor	r26, r26
    1274:	28 30       	cpi	r18, 0x08	; 8
    1276:	51 f1       	breq	.+84     	; 0x12cc <__ultoa_invert+0x5c>
    1278:	20 31       	cpi	r18, 0x10	; 16
    127a:	81 f1       	breq	.+96     	; 0x12dc <__ultoa_invert+0x6c>
    127c:	e8 94       	clt
    127e:	6f 93       	push	r22
    1280:	6e 7f       	andi	r22, 0xFE	; 254
    1282:	6e 5f       	subi	r22, 0xFE	; 254
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	8f 4f       	sbci	r24, 0xFF	; 255
    1288:	9f 4f       	sbci	r25, 0xFF	; 255
    128a:	af 4f       	sbci	r26, 0xFF	; 255
    128c:	b1 e0       	ldi	r27, 0x01	; 1
    128e:	3e d0       	rcall	.+124    	; 0x130c <__ultoa_invert+0x9c>
    1290:	b4 e0       	ldi	r27, 0x04	; 4
    1292:	3c d0       	rcall	.+120    	; 0x130c <__ultoa_invert+0x9c>
    1294:	67 0f       	add	r22, r23
    1296:	78 1f       	adc	r23, r24
    1298:	89 1f       	adc	r24, r25
    129a:	9a 1f       	adc	r25, r26
    129c:	a1 1d       	adc	r26, r1
    129e:	68 0f       	add	r22, r24
    12a0:	79 1f       	adc	r23, r25
    12a2:	8a 1f       	adc	r24, r26
    12a4:	91 1d       	adc	r25, r1
    12a6:	a1 1d       	adc	r26, r1
    12a8:	6a 0f       	add	r22, r26
    12aa:	71 1d       	adc	r23, r1
    12ac:	81 1d       	adc	r24, r1
    12ae:	91 1d       	adc	r25, r1
    12b0:	a1 1d       	adc	r26, r1
    12b2:	20 d0       	rcall	.+64     	; 0x12f4 <__ultoa_invert+0x84>
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <__ultoa_invert+0x48>
    12b6:	68 94       	set
    12b8:	3f 91       	pop	r19
    12ba:	2a e0       	ldi	r18, 0x0A	; 10
    12bc:	26 9f       	mul	r18, r22
    12be:	11 24       	eor	r1, r1
    12c0:	30 19       	sub	r19, r0
    12c2:	30 5d       	subi	r19, 0xD0	; 208
    12c4:	31 93       	st	Z+, r19
    12c6:	de f6       	brtc	.-74     	; 0x127e <__ultoa_invert+0xe>
    12c8:	cf 01       	movw	r24, r30
    12ca:	08 95       	ret
    12cc:	46 2f       	mov	r20, r22
    12ce:	47 70       	andi	r20, 0x07	; 7
    12d0:	40 5d       	subi	r20, 0xD0	; 208
    12d2:	41 93       	st	Z+, r20
    12d4:	b3 e0       	ldi	r27, 0x03	; 3
    12d6:	0f d0       	rcall	.+30     	; 0x12f6 <__ultoa_invert+0x86>
    12d8:	c9 f7       	brne	.-14     	; 0x12cc <__ultoa_invert+0x5c>
    12da:	f6 cf       	rjmp	.-20     	; 0x12c8 <__ultoa_invert+0x58>
    12dc:	46 2f       	mov	r20, r22
    12de:	4f 70       	andi	r20, 0x0F	; 15
    12e0:	40 5d       	subi	r20, 0xD0	; 208
    12e2:	4a 33       	cpi	r20, 0x3A	; 58
    12e4:	18 f0       	brcs	.+6      	; 0x12ec <__ultoa_invert+0x7c>
    12e6:	49 5d       	subi	r20, 0xD9	; 217
    12e8:	31 fd       	sbrc	r19, 1
    12ea:	40 52       	subi	r20, 0x20	; 32
    12ec:	41 93       	st	Z+, r20
    12ee:	02 d0       	rcall	.+4      	; 0x12f4 <__ultoa_invert+0x84>
    12f0:	a9 f7       	brne	.-22     	; 0x12dc <__ultoa_invert+0x6c>
    12f2:	ea cf       	rjmp	.-44     	; 0x12c8 <__ultoa_invert+0x58>
    12f4:	b4 e0       	ldi	r27, 0x04	; 4
    12f6:	a6 95       	lsr	r26
    12f8:	97 95       	ror	r25
    12fa:	87 95       	ror	r24
    12fc:	77 95       	ror	r23
    12fe:	67 95       	ror	r22
    1300:	ba 95       	dec	r27
    1302:	c9 f7       	brne	.-14     	; 0x12f6 <__ultoa_invert+0x86>
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	61 05       	cpc	r22, r1
    1308:	71 05       	cpc	r23, r1
    130a:	08 95       	ret
    130c:	9b 01       	movw	r18, r22
    130e:	ac 01       	movw	r20, r24
    1310:	0a 2e       	mov	r0, r26
    1312:	06 94       	lsr	r0
    1314:	57 95       	ror	r21
    1316:	47 95       	ror	r20
    1318:	37 95       	ror	r19
    131a:	27 95       	ror	r18
    131c:	ba 95       	dec	r27
    131e:	c9 f7       	brne	.-14     	; 0x1312 <__ultoa_invert+0xa2>
    1320:	62 0f       	add	r22, r18
    1322:	73 1f       	adc	r23, r19
    1324:	84 1f       	adc	r24, r20
    1326:	95 1f       	adc	r25, r21
    1328:	a0 1d       	adc	r26, r0
    132a:	08 95       	ret

0000132c <__prologue_saves__>:
    132c:	2f 92       	push	r2
    132e:	3f 92       	push	r3
    1330:	4f 92       	push	r4
    1332:	5f 92       	push	r5
    1334:	6f 92       	push	r6
    1336:	7f 92       	push	r7
    1338:	8f 92       	push	r8
    133a:	9f 92       	push	r9
    133c:	af 92       	push	r10
    133e:	bf 92       	push	r11
    1340:	cf 92       	push	r12
    1342:	df 92       	push	r13
    1344:	ef 92       	push	r14
    1346:	ff 92       	push	r15
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	ca 1b       	sub	r28, r26
    1356:	db 0b       	sbc	r29, r27
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	09 94       	ijmp

00001364 <__epilogue_restores__>:
    1364:	2a 88       	ldd	r2, Y+18	; 0x12
    1366:	39 88       	ldd	r3, Y+17	; 0x11
    1368:	48 88       	ldd	r4, Y+16	; 0x10
    136a:	5f 84       	ldd	r5, Y+15	; 0x0f
    136c:	6e 84       	ldd	r6, Y+14	; 0x0e
    136e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1370:	8c 84       	ldd	r8, Y+12	; 0x0c
    1372:	9b 84       	ldd	r9, Y+11	; 0x0b
    1374:	aa 84       	ldd	r10, Y+10	; 0x0a
    1376:	b9 84       	ldd	r11, Y+9	; 0x09
    1378:	c8 84       	ldd	r12, Y+8	; 0x08
    137a:	df 80       	ldd	r13, Y+7	; 0x07
    137c:	ee 80       	ldd	r14, Y+6	; 0x06
    137e:	fd 80       	ldd	r15, Y+5	; 0x05
    1380:	0c 81       	ldd	r16, Y+4	; 0x04
    1382:	1b 81       	ldd	r17, Y+3	; 0x03
    1384:	aa 81       	ldd	r26, Y+2	; 0x02
    1386:	b9 81       	ldd	r27, Y+1	; 0x01
    1388:	ce 0f       	add	r28, r30
    138a:	d1 1d       	adc	r29, r1
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	ed 01       	movw	r28, r26
    1398:	08 95       	ret

0000139a <_exit>:
    139a:	f8 94       	cli

0000139c <__stop_program>:
    139c:	ff cf       	rjmp	.-2      	; 0x139c <__stop_program>
